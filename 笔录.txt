
public static <T> List<T> set2List2(List<T> list,T t) {

	list.add(t);
	return list;
}

public static <T> T set2List(T set) {

	List<T> list = new ArrayList<>();
	list.add(set);
	return set;
}

Java内存管理
高并发
多线程
跨应用: 不要用sql语句直接调其他应用层用到的数据表来获取结果。
	    而是只通过其他应用层service调用返回结果
	
23种java设计模式:


java的4个特性：抽象 多态 继承 封装
代码的优化：低耗高效 可复用 可便于维护 可伸缩(插拔) 易读好理解  

多线程就是这种思想。一个执行程序有多个线程，目的就是为了提高效率，并使你在进行一个功能时能同时进行另外一个功能， 

服务器怎么调用前端(发邮件)


并行
并发
串行
同步
异步


项目管理，测试流程管理
tapd
jira

linux命令
1、查找命令：
find  where  locate  whereis  which
2、文件状态


ps process show
kill -9 123456
whereis locate which find
w who whois whoami
scp cp mv


高并发解决方案
并发用户数
并发概念
高并发 大流量的

Java 网络IO编程总结（BIO、NIO、AIO均含完整实例代码）
socket


写个工具类
根据开始时间和结束时间返回时间段内的时间集合
list 根据一个到多个属性排序
list groupby
list 求和
list groupby sum
list 去重
对象的equals hashcode
HashSet HashCode表机构存储
TreeSet 数机构存储

相同点：

单列集合，元素不可重复

不同点

1. 底层存储的数据结构不同

    HashSet底层用的是HashMap哈希表结构存储，而TreeSet底层用的是TreeMap树结构存储

2.存储时保证数据唯一性依据不同

   HashSet是通过复写hashCode()方法和equals()方法来保证的，而HashSet通过Compareable接口的compareTo()方法来保证的

3.有序性不一样

 HashSet无序，TreeSet有序

 存储原理：

  HashSet:底层数据结构是哈希表，本质就是对哈希值的存储，通过判断元素的hashCode方法和equals方法来保证元素的唯一性，当hashCode值不相同，就直接存储了，
  不用再判断equals了，当hashCode值相同时，会再判断一次euqals方法的返回值是否为true，如果为true则视为用一个元素，不用存储，如果为false，
  这些相同哈希值不同内容的元素都存放一个桶里（当哈希表中有一个桶结构，每一个桶都有一个哈希值）
  TreeSet:底层的数据结构是二叉树，可以对Set集合中的元素进行排序,这种结构，可以提高排序性能, 根据比较方法的返回值确定的,只要返回的是0.就代表元素重复


工具类的总结

日志的重要性

前端
后端
全局环境
网络
前后传参不一致:格式 数据不一致


前端给我的尽量用字符串类型接收


技术统计

别人用业务逻辑（尽可能保留扩展的余地）
自己本身需要的业务逻辑

svn知识：
svn copy http://.../trunk/ http://..../branches/branchesname -m "注释信息";
分支合主干（合并分支新功能代码到主干）
主干合分支
（由于长期的独立开发，可能会在合并回主线时出现较多的冲突。所以在支线上开发间期如果发现主干有更新，而且这个更新有可能将来跟你产生冲突，那你可以先将主线的内容合并到分支上。
已免等到做了大量修改再来更新。）
拉分支
checkout
revert
conflict：
kingtuns.txt.r101
kingtuns.txt.r102
kingtuns.txt.mine
kingtuns.txt。



新版本要对旧版本的兼容

基础版本很重要尽量广泛，为以后版本做预留，升级的余地
新版本尽量不要修改旧版本的东西，可以添加。开闭原则
xml命名规范尽量看得懂

1、编码的高效低耗的理解：
	java代码里面排序（大量的new对象消耗jvm内存），应该在数据库中排序。
	java代码的重复利用（通用），便于扩展升级，版本维护，已读。（新老版本的兼容）
	java代码的灵活性，可配置，可插拔，避免硬编码。
2、尽量使用缓存，用空间换取时间，减少对数据库的访问。
3、数据库的读写分离

数据的一致性问题（脏数据）,乱数据。

沟通很重要：
例子：推送数据格式，app传输格式，业务数据字段定义，调用错误的接口


List map排序:
Collections.sort(list, new Comparator<TestAccount>() {
		@Override
		public int compare(TestAccount ta1, TestAccount ta2) {
			return ta2.date.compareTo(ta1.date);
	}});

List<Object>去重:
set distinct
groupby:
Map<Boolean, List<Integer>> collectGroup = Stream.of(1, 2, 3, 4).collect(Collectors.groupingBy(it -> it > 3));  




json数组对象 json单体对象 map list javaben实体对象 String  jsonString 



接口，抽象类，普通类都可以直接new，可以写成匿名类的方法。

代码1:直接new接口，实现该接口的抽象方法。

interface Person {
    public void eat();
}
 
public class Demo {
    public static void main(String[] args) {
        Person p = new Person() {
            public void eat() {
                System.out.println("eat something");
            }
        };
        p.eat();
    }
}
运行结果：eat something

代码2：直接new抽象类，实现该抽象类的抽象方法。

abstract class Person {
    public abstract void eat();
}
 
public class Demo {
    public static void main(String[] args) {
        Person p = new Person() {
            public void eat() {
                System.out.println("eat something");
            }
        };
        p.eat();
    }
}


INSERT INTO t_cycling_bu_cms_sys_message SELECT * FROM t_cycling_bu_sys_message


SELECT 
  oer.city_area_code cityCode,
  DATE_FORMAT(oer.order_time, '%H:%i:%s') TIME,
  oer.order_no orderNo,
  GROUP_CONCAT(od.resource_name SEPARATOR ',') resourceName,
  oer.amount amount,
  us.nick_name nickName,
  oer.site_code siteCode 
FROM
  t_cycling_bu_2c_order_detail od 
  LEFT JOIN t_cycling_bu_2c_order oer 
    ON od.order_no = oer.order_no 
  LEFT JOIN t_cycling_bu_2c_user_info us 
    ON us.user_id = oer.user_id 
WHERE od.enable = 1 
  AND oer.enable = 1 
  AND us.enable = 1 
  AND oer.status = 1 
  AND DATE_FORMAT(oer.order_time, '%Y-%m-%d') = DATE_FORMAT(SYSDATE(), '%Y-%m-%d') 
GROUP BY oer.order_no,
  oer.amount,
  us.nick_name,
  oer.updated_time,
  oer.site_code 
ORDER BY oer.order_time DESC 
LIMIT 10 

技术引起的错误
功能要求，性能要求，代码质量要求。
业务引起的错误

业务需求：
加盟商模块在绑卡的情况下是否支持编辑。
广告位在上线\下线的情况下是否可以排序
消息已经推送出去了，是否需要屏蔽编辑。
消息公告推送对C端，是否需要考虑预留B端的情况，数据库需要预留字段。
业务场景的分析。
cardbin接口
商家：绑卡，充值，支付，解绑
客户：绑卡，收入，提现，解绑
手动删除数据库，导致数据不一致
手动跑批，导致数据不一致，
用户注册统计，用户提现订单统计，用户投递订单统计。

目录：

if(list!=null && !list.isEmpty()){
这个里面取list中的值
}else{
做其他处理
}

数据库表的设计重要性
各个端人员交流、沟通
考虑后续升级扩展
saveOrUpdate

造成数据不一致的原因主要有：

数据冗余
如果数据库中存在冗余数据，比如两张表中都存储了用户的地址，在用户的地址发生改变时，如果只更新了一张表中的数据，那么这两张表中就有了不一致的数据。

并发控制不当
比如某个订票系统中，两个用户在同一时间订同一张票，如果并发控制不当，可能会导致一张票被两个用户预订的情况。当然这也与元数据的设计有关。

故障和错误
如果软硬件发生故障造成数据丢失等情况，也可能引起数据不一致的情况。因此我们需要提供数据库维护和数据恢复的一些措施。



数据库：
1、数据库引擎
2、数据库读写分离:要实现读写分离，就要解决主从数据库数据同步的问题,在主数据库写入数据后要保证从数据库的数据也要更新。
3、数据库集群。
4、数据库批量操作。
5、数据库事务。防止sql注入
6、数据库系统表（自带的）
7、数据库触发器、存储过程：
8、数据库优化(代码层)：
	尽可能是单表查询
	创建唯一索引，主键索引。
	检查order by语句以找出非索引项或者表达式，它们会降低性能。解决这个问题的办法就是重写order by语句以使用索引，也可以为所使用的列建立另外一个索引，同时应绝对避免在order by子句中使用表达式。
	适当字段冗余。
	不要select *
	有分页有条件查询。
	多表联合查询(join)
	使用缓存技术。以空间获取时间。
	sql语句中尽量不要使用复杂的函数运算
	尽量不要用blob类型存在二进制数据
9、垂直拆分(业务拆分)，水平拆分(单表拆分)
10、索引库(solr)的创建、lucence。
11、数据库的存储过程：
	建议mysql触发器、存储过程都不要用为好。
	这种东西只有在并发不高的项目，管理系统中用。
	如果是面向用户的高并发应用，都不要使用。
	触发器和存储过程本身难以开发和维护，不能高效移植。
	触发器完全可以用事务替代。
	存储过程可以用后端脚本（java程序）替代。

binary log:
	insert into user(id,name)values(1,'a'),(2,'b');
relay log:
    insert into user(id,name)values(1,'a'),(2,'b');

概念：节点/维度/场景

数据库优化(脚本):
浅谈MySQL中优化sql语句查询常用的30种方法

1.对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。 

2.应尽量避免在 where 子句中使用!=或<>操作符，否则将引擎放弃使用索引而进行全表扫描。 

3.应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如： 
select id from t where num is null 
可以在num上设置默认值0，确保表中num列没有null值，然后这样查询： 
select id from t where num=0 

4.应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如： 
select id from t where num=10 or num=20 
可以这样查询： 
select id from t where num=10 
union all 
select id from t where num=20 

5.下面的模糊查询也将导致全表扫描： 
select id from t where name like '%abc%' 
若要提高效率，可以考虑全文检索(FULLTEXT)。 

6.in 和 not in 也要慎用，否则会导致全表扫描，如： 
select id from t where num in(1,2,3) 
对于连续的数值，能用 between 就不要用 in 了： 
select id from t where num between 1 and 3 

7.如果在 where 子句中使用参数，也会导致全表扫描。因为SQL只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时；它必须在编译时进行选择。然而，如果在编译时建立访问计划，
变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描： 
select id from t where num=@num 
可以改为强制查询使用索引： 
select id from t with(index(索引名)) where num=@num 

8.应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如： 
select id from t where num/2=100 
应改为: 
select id from t where num=100*2 

9.应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如： 
select id from t where substring(name,1,3)='abc'--name以abc开头的id 
select id from t where datediff(day,createdate,'2005-11-30')=0--'2005-11-30'生成的id 
应改为: 
select id from t where name like 'abc%' 
select id from t where createdate>='2005-11-30' and createdate<'2005-12-1' 

10.不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。 

11.在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。 

12.不要写一些没有意义的查询，如需要生成一个空表结构： 
select col1,col2 into #t from t where 1=0 
这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样： 
create table #t(...) 

13.很多时候用 exists 代替 in 是一个好的选择： 
select num from a where num in(select num from b) 
用下面的语句替换： 
select num from a where exists(select 1 from b where num=a.num) 

14.并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在sex上建了索引
也对查询效率起不了作用。 

15.索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。
一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。 

16.应尽可能的避免更新 clustered 索引数据列，因为 clustered 索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新
clustered 索引数据列，那么需要考虑是否应将该索引建为 clustered 索引。 

17.尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只
需要比较一次就够了。 

18.尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。 

19.任何地方都不要使用 select * from t ，用具体的字段列表代替“*”，不要返回用不到的任何字段。 

20.尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）。 

21.避免频繁创建和删除临时表，以减少系统表资源的消耗。 

22.临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。 

23.在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。 

24.如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。 

25.尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。 

26.使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。 

27.与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。在结果集中包括“合计”的例程通常要比使用游标执行
的速度快。如果开发时间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。 

28.在所有的存储过程和触发器的开始处设置 SET NOCOUNT ON ，在结束时设置 SET NOCOUNT OFF 。无需在执行存储过程和触发器的每个语句后向客户端发送 DONE_IN_PROC 消息。 

29.尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。 

30.尽量避免大事务操作，提高系统并发能力。

maven 命令:
clean install -e -U
clean -U -Dmaven.test.skip=true
1.   -D 传入属性参数

比如命令：

1.-D
mvn package -Dmaven.test.skip=true

以“-D”开头，将“maven.test.skip”的值设为“true”,就是告诉maven打包的时候跳过单元测试。同理，“mvn deploy-Dmaven.test.skip=true”代表部署项目并跳过单元测试。



2.   -P 使用指定的Profile配置

3.  -e 显示maven运行出错的信息

4.  -o 离线执行命令,即不去远程仓库更新包

5.   -X 显示maven允许的debug信息

6.   -U 强制去远程更新snapshot的插件或依赖，默认每天只更新一次


数据库脚本：

表某两个字段互换数据:
UPDATE t_cycling_bu_data_boss_order_statistics AS a, t_cycling_bu_data_boss_order_statistics AS b SET a.area_name=b.area_code, a.area_code=b.area_name WHERE a.id=b.id

纵表转横表：
CREATE TABLE `t_cycling_bu_data_boss_order_statistics` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `statistic_time` date DEFAULT NULL COMMENT '统计日期',
  `type` bigint(20) DEFAULT NULL COMMENT '1:c端投递订单，2b端回收订单',
  `total` bigint(20) DEFAULT '0' COMMENT '订单数量',
  `area_name` varchar(100) NOT NULL COMMENT '城市名称',
  `area_code` varchar(100) DEFAULT NULL COMMENT '城市代码',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8

全国统计：
SELECT a.`statistic_time`,a.`area_code`,a.`area_name`,
SUM(CASE a.`type` WHEN 1 THEN a.`total` ELSE 0 END) '投递订单',
SUM(CASE a.`type` WHEN 2 THEN a.`total` ELSE 0 END) '回收订单'
FROM t_cycling_bu_data_boss_order_statistics a
GROUP BY a.`statistic_time`,a.`area_code`,a.`area_name`

分城市统计：
SELECT a.`statistic_time`,
SUM(CASE a.`type` WHEN 1 THEN a.`total` ELSE 0 END) '投递订单',
SUM(CASE a.`type` WHEN 2 THEN a.`total` ELSE 0 END) '回收订单'
FROM t_cycling_bu_data_boss_order_statistics a
GROUP BY a.`statistic_time`

横表转纵表
CREATE TABLE `scores` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(100) DEFAULT NULL,
  `java` varchar(100) DEFAULT NULL,
  `c` varchar(100) DEFAULT NULL,
  `python` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8


SELECT NAME AS '姓名','java' AS '课程',java AS '成绩' FROM scores UNION ALL
SELECT NAME AS '姓名','c' AS '课程',c AS '成绩' FROM scores UNION ALL
SELECT NAME AS '姓名','python' AS '课程',python AS '成绩' FROM scores 

SELECT DATE_ADD(CURDATE(), INTERVAL -6 DAY)
SELECT  DATE_SUB(CURDATE(),INTERVAL -6 DAY)

ORDER BY '姓名','课程' ASC

<insert id="insertByBatch" parameterType="java.util.List">
	insert into t_cycling_bu_2b_site_batch_aliance
		(batch_code,aliance_id,created_user_id,updated_user_id,created_time,updated_time,enable,site_num)
		values
	<foreach collection="list" item="item" index="index"
		separator=",">
		(#{item.batchCode},#{item.alianceId},#{item.createdUserId},#{item.updatedUserId},now(),now(),#{item.enable},#{item.siteNum})
	</foreach>
</insert>

union,union all用法
SELECT stime,city,td FROM ordertt WHERE stime='07-01'
UNION 
SELECT stime,city,td FROM ordertt WHERE stime='07-02'
等价于
SELECT stime,city,td FROM ordertt WHERE stime ='07-01' OR stime='07-02'
使用order by
SELECT * FROM(
SELECT stime,city,td FROM ordertt WHERE stime='07-01' ORDER BY city
) AS s1 UNION ALL 
SELECT stime,city,td FROM ordertt WHERE stime='07-02' ORDER BY city

EXISTS用法：
SELECT 
  SUM(d.number) AS today_number,
  SUM(d.weight) AS today_weight 
FROM
  t_cycling_bu_2c_order_detail d,
  t_cycling_bu_2c_user_info u 
WHERE d.user_id = u.user_id 
  AND d.created_time >= '2018-07-01'
  AND d.enable = 1 
  AND NOT EXISTS 
  (SELECT 1 
   FROM
     t_cycling_bu_data_special_list 
   WHERE phone = u.phone 
        AND start_time <'2018-07-01' 
        AND (end_time IS NULL OR end_time > '2018-07-01')
        AND `enable` = 1)



数据库数据不一致：数据重复，数据大，数据小，数据缺失。
不正确，
乱数据，
数据手动创建，
数据手动修改

<select id="queryALLByDateAndName" resultType="com.xhg.aliance.franchiser.pojo.FranchiserMonthProfit">
	SELECT
	month.statistic_date AS statiscticDate,
	aliance.link_name    AS linkName,
	aliance.id_card      AS idCard,
	month.total          AS total,
	month.build_number   AS buildNumber,
	month.share_profit   AS shareProfit,
	month.rent           AS rent,
	month.taxation       AS taxation,
	month.fact           AS fact,
	month.aliance_id     AS alianceId
	FROM t_cycling_bu_2b_franchiser_month_profit AS month
	LEFT JOIN t_cycling_bu_2b_aliance AS aliance ON month.aliance_id = aliance.id AND aliance.enable = 1
	WHERE 1=1
	  <if test="name !=null and name !=''">
		  and aliance.link_name LIKE concat('%', #{name}, '%')
	  </if>
	  <if test="startDate != null and startDate != ''">
		<![CDATA[ and month.statistic_date >= #{startDate} ]]>
	  </if>
	<if test="endDate != null and endDate != '' ">
		<![CDATA[ and month.statistic_date <= #{endDate} ]]>
	</if>
	ORDER BY statistic_date DESC
</select>


List map用法：
	List<PutOrderForExcel> collect = cycling2cOrderCriteriaDOS.stream().map((Cycling2cOrderCriteriaDO cycling2cOrderCriteriaDO) -> {
	PutOrderForExcel putOrderForExcel = new PutOrderForExcel();
	putOrderForExcel.setCity(cycling2cOrderCriteriaDO.getCity());
	putOrderForExcel.setName(cycling2cOrderCriteriaDO.getUserName());
	putOrderForExcel.setCreatedDate(cycling2cOrderCriteriaDO.getCreatedTime());
	putOrderForExcel.setPhone(cycling2cOrderCriteriaDO.getPhone());
	putOrderForExcel.setPrice(cycling2cOrderCriteriaDO.getAmount());
	putOrderForExcel.setSiteNo(cycling2cOrderCriteriaDO.getSiteCode());
	putOrderForExcel.setOrderNo(cycling2cOrderCriteriaDO.getOrderNo());
	List<Cycling2cOrderDetailCriteriaDO> cycling2cOrderDetailCriteriaDOS = cycling2cOrderService.queryOrderDetailByOrderNo(cycling2cOrderCriteriaDO.getOrderNo());
	if (cycling2cOrderDetailCriteriaDOS != null ) {
		// 毛重
		BigDecimal reduce = cycling2cOrderDetailCriteriaDOS.stream()
				.filter(cycling2cOrderDetailCriteriaDO -> StringUtils.equals(cycling2cOrderDetailCriteriaDO.getUnit(), "kg"))
				.filter(cycling2cOrderDetailCriteriaDO -> cycling2cOrderDetailCriteriaDO.getGrossWeight() != null)
				.map(Cycling2cOrderDetailCriteriaDO::getGrossWeight)
				.reduce(BigDecimal.ZERO, BigDecimal::add);
		//净重
		BigDecimal reduce1 = cycling2cOrderDetailCriteriaDOS.stream()
				.filter(cycling2cOrderDetailCriteriaDO -> StringUtils.equals(cycling2cOrderDetailCriteriaDO.getUnit(), "kg"))
				.map(Cycling2cOrderDetailCriteriaDO::getCount)
				.reduce(BigDecimal.ZERO, BigDecimal::add);
		putOrderForExcel.setGrossWeight(reduce);
		putOrderForExcel.setSuttleWeight(reduce1);
		//扣秤率
		if (!cycling2cOrderDetailCriteriaDOS.isEmpty()){
			putOrderForExcel.setRate(cycling2cOrderDetailCriteriaDOS.get(0).getTakeoffPercent());
		}
		//扣秤重量总额
		BigDecimal subtract7;
		if (cycling2cOrderCriteriaDO.getGrossAmount() != null) {
			subtract7 = cycling2cOrderCriteriaDO.getGrossAmount().subtract(cycling2cOrderCriteriaDO.getAmount());
		} else {
			subtract7 = new BigDecimal(0);
		}
		putOrderForExcel.setSubtractPrice(subtract7);
		cycling2cOrderDetailCriteriaDOS.stream().filter(Objects::nonNull)
				.filter(cycling2cOrderDetailCriteriaDO -> cycling2cOrderDetailCriteriaDO.getGrossWeight() != null && cycling2cOrderDetailCriteriaDO.getGrossAmount() != null)
				.forEach(cycling2cOrderDetailDO -> {
					switch (cycling2cOrderDetailDO.getType()) {
						case "0":
							putOrderForExcel.setNumber0(cycling2cOrderDetailDO.getCount());
							putOrderForExcel.setPrice0(cycling2cOrderDetailDO.getAmount());
							break;
						case "1":
							putOrderForExcel.setWeight1(cycling2cOrderDetailDO.getCount());
							putOrderForExcel.setPrice1(cycling2cOrderDetailDO.getAmount());
							BigDecimal subtract = cycling2cOrderDetailDO.getGrossWeight().subtract(cycling2cOrderDetailDO.getCount());
							putOrderForExcel.setSubstracWeight1(subtract);
							BigDecimal subtract1 = cycling2cOrderDetailDO.getGrossAmount().subtract(cycling2cOrderDetailDO.getAmount());
							putOrderForExcel.setSubstracPrice1(subtract1);
							break;
						case "2":
							putOrderForExcel.setWeight2(cycling2cOrderDetailDO.getCount());
							putOrderForExcel.setPrice2(cycling2cOrderDetailDO.getAmount());
							BigDecimal subtract2 = cycling2cOrderDetailDO.getGrossWeight().subtract(cycling2cOrderDetailDO.getCount());
							putOrderForExcel.setSubstracWeight2(subtract2);
							BigDecimal subtract21 = cycling2cOrderDetailDO.getGrossAmount().subtract(cycling2cOrderDetailDO.getAmount());
							putOrderForExcel.setSubstracPrice2(subtract21);
							break;
						case "3":
							putOrderForExcel.setWeight3(cycling2cOrderDetailDO.getCount());
							putOrderForExcel.setPrice3(cycling2cOrderDetailDO.getAmount());
							BigDecimal subtract3 = cycling2cOrderDetailDO.getGrossWeight().subtract(cycling2cOrderDetailDO.getCount());
							putOrderForExcel.setSubstracWeight2(subtract3);
							BigDecimal subtract31 = cycling2cOrderDetailDO.getGrossAmount().subtract(cycling2cOrderDetailDO.getAmount());
							putOrderForExcel.setSubstracPrice2(subtract31);
							break;
						case "4":
							putOrderForExcel.setWeight4(cycling2cOrderDetailDO.getCount());
							putOrderForExcel.setPrice4(cycling2cOrderDetailDO.getAmount());
							BigDecimal subtract4 = cycling2cOrderDetailDO.getGrossWeight().subtract(cycling2cOrderDetailDO.getCount());
							putOrderForExcel.setSubstracWeight2(subtract4);
							BigDecimal subtract41 = cycling2cOrderDetailDO.getGrossAmount().subtract(cycling2cOrderDetailDO.getAmount());
							putOrderForExcel.setSubstracPrice2(subtract41);
							break;
						case "5":
							putOrderForExcel.setWeight5(cycling2cOrderDetailDO.getCount());
							putOrderForExcel.setPrice5(cycling2cOrderDetailDO.getAmount());
							BigDecimal subtract5 = cycling2cOrderDetailDO.getGrossWeight().subtract(cycling2cOrderDetailDO.getCount());
							putOrderForExcel.setSubstracWeight2(subtract5);
							BigDecimal subtract51 = cycling2cOrderDetailDO.getGrossAmount().subtract(cycling2cOrderDetailDO.getAmount());
							putOrderForExcel.setSubstracPrice2(subtract51);
							break;
						case "6":
							putOrderForExcel.setWeight6(cycling2cOrderDetailDO.getCount());
							putOrderForExcel.setPrice6(cycling2cOrderDetailDO.getAmount());
							BigDecimal subtract6 = cycling2cOrderDetailDO.getGrossWeight().subtract(cycling2cOrderDetailDO.getCount());
							putOrderForExcel.setSubstracWeight2(subtract6);
							BigDecimal subtract61 = cycling2cOrderDetailDO.getGrossAmount().subtract(cycling2cOrderDetailDO.getAmount());
							putOrderForExcel.setSubstracPrice2(subtract61);
							break;
						default:
							break;
					}
				});
	}
	return putOrderForExcel;
	}).collect(Collectors.toList());

数据库层面的锁机制：
悲观锁、乐观锁
数据库隔离级别：
① Serializable (串行化)：可避免脏读、不可重复读、幻读的发生。
② Repeatable read (可重复读)：可避免脏读、不可重复读的发生。
③ Read committed (读已提交)：可避免脏读的发生。
④ Read uncommitted (读未提交)：最低级别，任何情况都无法保证
	以上四种隔离级别最高的是Serializable级别，最低的是Read uncommitted级别，当然级别越高，执行效率就越低。像Serializable这样的级别，
	就是以锁表的方式(类似于Java多线程中的锁)使得其他的线程只能在锁外等待，所以平时选用何种隔离级别应该根据实际情况。
	在MySQL数据库中默认的隔离级别为Repeatable read (可重复读)。
	
大数量操作：
如何将百万级数据高效的导出到Excel表单。
大批量数据库插入、更新。（方案）
	一行数据10个字段，两个字段需要循环查。导出5000行。
	异步任务。
	数据中心（独立一个服务项目）
	分页倒出。
	业务系统。
	时间段导出。
	前端分页。
	数据冗余。
	量变导致质变。
定时插入大量数据到数据库。
营销短信的批量发送。
异步批量发送邮件。
每天三个时段生成excel表格报表发送邮件。

省编码，市，区编码
字段冗余（尽量冗余不易变化的字段）
用户地址、用户名、用户状态，付款状态。

业务流程管理（BPM）框架


com.xhg.ops.system.dao.
com.xhg.ops.system.model.

统计口径
事务补偿机制

web.xml说明
首先了解下web.xml中元素的加载顺序：
•启动web项目后，web容器首先回去找web.xml文件，读取这个文件
•容器会创建一个 ServletContext （ servlet 上下文），整个 web 项目的所有部分都将共享这个上下文
•容器将 转换为键值对，并交给 servletContext
•容器创建 中的类实例，创建监听器
•容器加载filter，创建过滤器， 要注意对应的filter-mapping一定要放在filter的后面
•容器加载servlet，加载顺序按照 Load-on-startup 来执行

完整加载顺序：ServletContext -> context-param -> listener-> filter -> servlet

spring boot加载spring监听器：


public class MyHttpSessionListener implements HttpSessionListener {
 
    /**
     * Default constructor. 
     */
    public MyHttpSessionListener() {
        // TODO Auto-generated constructor stub
    }
 
	/**
     * @see HttpSessionListener#sessionCreated(HttpSessionEvent)
     */
    public void sessionCreated(HttpSessionEvent se)  { 
         System.out.println(se.getSession().getId()+" session create");
    }
 
	/**
     * @see HttpSessionListener#sessionDestroyed(HttpSessionEvent)
     */
    public void sessionDestroyed(HttpSessionEvent se)  { 
         System.out.println(se.getSession().getId()+" session destroy");
    }
	
}


@Configuration
public class ListenerConfigure {
	
	@Bean
	public ServletListenerRegistrationBean<MyHttpSessionListener> serssionListenerBean(){
		ServletListenerRegistrationBean<MyHttpSessionListener> 
		sessionListener = new ServletListenerRegistrationBean<MyHttpSessionListener>(new MyHttpSessionListener());
		return sessionListener;
	}
	
	
//	@Bean
//	public ServletListenerRegistrationBean<MyServletContextListener> servletContextListenerBean(){
//		ServletListenerRegistrationBean<MyServletContextListener> 
//		sessionListener = new ServletListenerRegistrationBean<MyServletContextListener>(new MyServletContextListener());
//		return sessionListener;
//	} 

}

@WebListener
public class MyServletContextListener implements ServletContextListener {
 
	@Override
	public void contextInitialized(ServletContextEvent sce) {
		System.out.println(sce.getServletContext().getServletContextName()+" init");
		
	}
 
	@Override
	public void contextDestroyed(ServletContextEvent sce) {
		System.out.println(sce.getServletContext().getServletContextName()+" destroy");
		
	}
}

public class Bootstrap implements ServletContextListener { 

    private ServletOAuthClient client; 

    @Override 
    public void contextInitialized(ServletContextEvent sce) { 
        client = new ServletOAuthClient(); 
        ServletContext context = sce.getServletContext(); 

        configureClient(context); 
        context.setAttribute(ServletOAuthClient.class.getName(), client); 
    } 

    @Override 
    public void contextDestroyed(ServletContextEvent sce) { 
        client.stop(); 
    } 

    private void configureClient(ServletContext context) { 
        InputStream is = null; 
        String path = context.getInitParameter("keycloak.config.file"); 
        if (path == null) { 
            is = context.getResourceAsStream("/WEB-INF/keycloak.json"); 
        } else { 
            try { 
                is = new FileInputStream(path); 
            } catch (FileNotFoundException e) { 
                throw new RuntimeException(e); 
            } 
        } 

        client = ServletOAuthClientBuilder.build(is); 
    } 
}

@WebFilter

需要注意的是在启动类需要添加@ServletComponentScan扫描，其中包名自定义

@ServletComponentScan(basePackages = {"com.example.controller.filter"})

@WebFilter(urlPatterns = "/*")
@Order(1)
public class MemberFilter implements Filter {
    @Override
    public void init(FilterConfig filterConfig) throws ServletException {

    }

    @Override
    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {
        System.err.println("自定义过滤器MemberFilter->doFilter");
    }

    @Override
    public void destroy() {

    }
}


用户体验差：缓存大容量的数据
请求普通接口。请求基础数据（隐藏接口）
不怎么变的数据最好冗余
迭代新的版本的时候，对于方法只能增不能改（为了兼容旧版本）

nohup java -jar -Dspring.config.location=/etc/xhg/xhg-sys-config/application.properties /data/psrecycle/xhg-sys-config-1.0.4.jar 2>/data/logs/xhg-sys-config/xhgsysconfigerr.out 1>/data/logs/xhg-sys-config/xhgsysconfigstd.out &
nohup java -jar -Dspring.config.location=/etc/xhg/xhg-boss/application.properties /data/psrecycle/xhg-boss-1.1.6.jar 2>/data/logs/boss/bosserr.out 1>/data/logs/boss/bossstd.out &


java -jar -Xms200m -Xmx200m -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/data/logs/boss/ -Dspring.config.location=/etc/xhg/xhg-boss/application.properties /data/psrecycle/xhg-boss-1.4.0.jar

mkdir cms-service
touch cmsserviceerr.out  cmsservicestd.out
ps -ef| grep 'java'
ps -ef | grep python
ps -aux|grep 'java'
ps -aux|grep py查看端口号
ps -aux|grep boss
python -m SimpleHTTPServer 9080


mysql中 like关键字调优
ALTER TABLE `t_cycling_bu_cms_qualification` ADD FULLTEXT `fidx_provinces` (`provinces`);
ALTER TABLE `t_cycling_bu_cms_qualification` ADD FULLTEXT `fidx_citys` (`citys`)
ALTER TABLE `t_cycling_bu_cms_qualification` ADD FULLTEXT `fidx_areas` (`areas`)
SELECT * FROM t_cycling_bu_cms_qualification WHERE 1=1 AND ENABLE=1 AND MATCH (areas)AGAINST ('110105000000') AND citys='1'
EXPLAIN SELECT * FROM t_cycling_bu_cms_qualification WHERE MATCH (citys)AGAINST ('110100000000')

maven:
循环依赖

枚举代码：
public static void main(String[] args) {
	UserMessage message = new UserMessage();
	BoxStatusEnum f=BoxStatusEnum.FULL;
	message.setUserTypeCopy(f);
}

public void setUserTypeCopy(BoxStatusEnum en) {
	this.userType = en.getStatus();
}


enum BoxStatusEnum {

	FULL(1, "回收箱已满"), FULL80(2, "回收箱80%箱满");

	private int index;

	private String status;

	BoxStatusEnum(int index, String status) {
		this.index = index;
		this.status = status;
	}

	public int getIndex() {
		return index;
	}

	public void setIndex(int index) {
		this.index = index;
	}

	public String getStatus() {
		return status;
	}

	public void setStatus(String status) {
		this.status = status;
	}
}

项目开发



月报：
营销短信的批量发送。
微服务改造
rbac优化




项目的构建：
maven的循环依赖 双向依赖 相互依赖
java项目内存(static)
redis缓存。
持久化存储。
版本合并合并代码丢失

业务规则


预算资金：3万
预算时间：1个月
学习：
mqtt 
需求：一份需求文档
计划：
	公益网站
	公益app应用
	英文学习
	英文电影
	英文音乐
	
	

	
28000
 3000
 1000
 1600
  200
  300
  
~~~ 35000

order by updated_time desc
	
	

测试环境：
10.10.10.41  test5           dev/dev201808!
10.10.10.42  test6           dev/dev201808!
10.10.10.43  test7           dev/dev201808!


契约   springcloud
接口  dobble

源码：
风险点：
开发环境有多个同样的服务（分布式锁）
spring.datasource.url= jdbc:mysql://172.31.0.81:3306/recycledb?characterEncoding=utf8&serverTimezone=Asia/Shanghai
spring.datasource.username= preuser
spring.datasource.password=Prexhg20180416#
spring.datasource.driver-class-name= com.mysql.jdbc.Driver
spring.datasource.type= com.alibaba.druid.pool.DruidDataSource


@Value()读取不了配置文件==》swagger版本代码的影响。
jar 版本关联不对：boss1.0.6 关联 sys-config1.0.4.2
代码修改的影响。（对于写操作的慎重）

SELECT t1.siteCode ,t1.areaCode from
(
SELECT DISTINCT s.site_code siteCode ,s.area_code areaCode from
t_cycling_bu_site s
where EXISTS (
SELECT a.area_code from t_cycling_db_area p,t_cycling_db_area
c,t_cycling_db_area a
WHERE a.parent_id=c.id and c.parent_id=p.id and s.area_code=a.area_code
<if test="nodeLevel != null and areaCode != null and  areaCode != '0'">
	<if test="nodeLevel == 0 ">
		and p.area_code=#{areaCode}
	</if>
	<if test="nodeLevel == 1 ">
		and c.area_code=#{areaCode}
	</if>
	<if test="nodeLevel == 2 ">
		and a.area_code=#{areaCode}
	</if>
</if>

) and s.enable=1
) t1 LEFT JOIN
(
select DISTINCT m.site_code siteCode ,m.area_code areaCode from
t_cycling_bu_device_advertisement
ad,t_cycling_bu_device_advertisement_map m
where ad.enable=1 and m.enable=1 and ad.id=m.ad_id
and ad.ad_type=#{adType} and
ad.ad_location=#{adLocation}
) t2 ON
t1.siteCode=t2.siteCode where t2.siteCode is NULL

mqtt
spring activi

分布式事务：
遇到的奇怪问题：
@Value 无法读取：swagger版本导致
注解扫描不到



10.22-10.26微服务改造


//去除重复手机号
Set<String> phoneSet = new HashSet<String>(phoneList);   
phoneList.clear();   
phoneList.addAll(phoneSet);


终端微服务 SiteFeignService


经常使用到的区域查询：
SELECT * FROM t_cycling_db_area WHERE area_code='440000000000'
SELECT * FROM t_cycling_db_area WHERE parent_id=2250
SELECT * FROM t_cycling_db_area WHERE parent_id=2251

新旧版本的兼容

负载均衡
负载均衡策略：轮询（默认）
redis key的定义注意事项
	结构化数据库的特点在于，需要事先严格定义好字段名。
	
多个服务实例，请求到不同的实例（版本不一致）

	
	
	 ResponseBean<?> responseBean = cyclingPlayScreenFeginService.queryListPage(requestBean);

        ? result = RqRsUtil.getResponseData(responseBean,BizCodeErrorStatus.CMS_ERROR.getCode(),BizCodeErrorStatus.CMS_ERROR.getMessage());

        return RqRsUtil.getResponseBean(result);
		
		
		骑手的
		广告的
		
测试的Eureka中心ip:http://10.10.10.242:8761/


不断添加

	/**
	 * 获取广告排序
	 * 人工输入的排序号
	 * @param sort
	 * @return
	 */
	private String getSortByParams(String sort,String channelType,String ColumnType,Integer isDefault,Integer modifyId) {
		CyclingAdvertisementDO params = new CyclingAdvertisementDO();
		params.setChannelType(channelType);
		params.setColumnType(ColumnType);
		params.setId(modifyId);
		params.setIsDefault(isDefault);
		//排序赋值
		List<CyclingAdvertisementDO> dos = cyclingAdvertisementDao.queryAdSorList(params);
		if(dos == null||dos.size()==0) {
			return sort;
		}else {
			Integer sort1 = Integer.valueOf(sort);
			List<Integer> sorts = new ArrayList<>();
			for(CyclingAdvertisementDO tmp:dos)
				sorts.add(Integer.valueOf(tmp.getSort()));

			return getSort(sorts,sort1);

		}
	}

	//比较获取排序数字
	private String getSort(List<Integer> sorts,Integer sort){
		Integer temp = sort;
		Integer totalNum=1;
		boolean flag=false;
		for(int k=0;k<sorts.size()-1;k++) {
			if(flag)
				break;
			for (int i = 0; i < sorts.size() - 1; i++) {
				if (sorts.get(i) < sort) {
					int j = i + 1;
					if (sorts.get(j) > sort) {
						totalNum = sort;
						flag = true;
						break;
					}
				}

			}
			sort++;
		}
		if(!flag) {
			sort = temp;
			if (!sorts.contains(sort)) {
				totalNum = sort;
			} else {
				int asInt = sorts.stream().mapToInt(Integer::intValue).max().getAsInt();
				totalNum = asInt + 1;
			}
		}
		return totalNum+"";
	}

	
nohup java -jar -Xms200m -Xmx200m -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/data/logs/boss/1.1.9.9/ -Dspring.config.location=/etc/xhg/boss/1.1.9.9/application.properties  /data/psrecycle/xhg-boss-1.1.9.9.jar 2>/data/logs/boss/1.1.9.9/bosserr.out 1>/data/logs/boss/1.1.9.9/bossstd.out &

业务逻辑

SELECT a.*,b.*,@x:=@x+1 qq FROM t_cycling_bu_advertisement a,(SELECT @x :=0) b

SELECT * FROM t_cycling_bu_advertisement a,(SELECT 2*3) b
 
UPDATE 
  t_cycling_bu_advertisement m,
  (SELECT 
    * 
  FROM
    (SELECT 
      @x := @x + 1 xx,
      a.* 
    FROM
      t_cycling_bu_advertisement a,
      (SELECT 
        @x := 0) b WHERE a.channel_type='wechat_xcx' AND a.column_type='banner-c-delivery' AND a.status = 1
    ORDER BY a.sort) temp) AS t 
SET
  m.sort = t.xx 
WHERE m.id = t.id;


curl -X POST --header 'Content-Type: application/json' --header 'Accept: application/json' -d '{ \ 
   "requestBody": { \ 
     "data": { \ 
       "areaCodeList": ["110100000000"] \ 
     } \ 
   }, \ 
   "requestHead": { \ 
     "appId": "string", \ 
     "appVersion": "string", \ 
     "channel": "string", \ 
     "configVersion": "string", \ 
     "deviceId": "string", \ 
     "ostype": "string", \ 
     "phoneModel": "string", \ 
     "phoneResolution": "string", \ 
     "sign": "string", \ 
     "systemVersion": "string", \ 
     "token": "string", \ 
     "validateTime": "string" \ 
   } \ 
 }' 'http://localhost:8908/cms/area/queryListByAreaCodeList'
 
 
时间地点事件


redis缓存的注意事项：
key的命名规范


@Transactional(rollbackFor = Exception.class)
击穿缓存
容错性：依赖前端的传值 其他接口的传值 
代码需要健壮性
自以为是
没有跟他人讨论 交流

出现问题,分析问题 解决问题而不是抱怨问题
第一先要定位问题，第二看如何修复问题  
程序做到健壮性不能只靠前端 



尽可能的做到所有会出现问题的地方容错处理

喝点薏米红豆粥
山药排骨汤
冬瓜薏米排骨汤
苦瓜
茯苓
冬时萝卜夏吃姜，不用医生开药方
赤小豆、白扁豆、薏苡仁、木棉花、芡实、川萆薢、茯苓、百合、莲子、砂仁、法夏等等。一些爱好冬泳的人每天都会用芡实、薏苡仁、茯苓、百合、赤小豆打成粉后煮粥喝，这些中药对祛除体内淤滞较多湿气很有效果，同时又健脾养胃。
鸡蛋 

a={production:!0,hostUrl:"http://10.10.10.95:8083/boss"}
liuhui xhg2018#



less cms-service_error.2018-12-19.7.log|grep 'error'
less sys-config.log |grep -100 1c4d1792f401a8330000




	
300*500
后天系统
门户系统
互联网系统

cat
jumpserver
堡垒机


包容 感恩 




nohup java -jar  -Xms200m -Xmx200m -XX:+HeapDumpOnOutOfMemoryError 
-XX:HeapDumpPath=/data/logs/xhg-cms-service/ 
-Dspring.config.location=/etc/xhg/xhg-cms-service/application.properties 
xhg-cms-service-1.0.9.jar 
2>../logs/xhg-cms-service/cmsserviceerr.out  
1>../logs/xhg-cms-service/cmsservicestd.out  &

事务里面尽量不要调用第三方的接口





前后端代码 网络 配置文件 数据库 缓存问题



西红柿
橙子
苹果
葡萄
橘子

趾高气昂、气宇轩昂、不可一世、得意洋洋、沾沾自喜、盛气凌人、自以为是、目空一切、耀武扬威、
自命不凡、洋洋自得、踌躇满志、大摇大摆、眉飞色舞、扬眉吐气、自鸣得意、得意扬扬、大模大样、器宇轩昂、神气活现、
颐指气使、洋洋得意、得意忘形、高视阔步、春风得意






数据库脚本：
配置文件：231dev-

吃穿住行

话题：
幽默：
心里素质：
知识：
故事：

钱是抵御意外的底气，没有钱一切都是浮云
天空飘了几个字：
架构式话语。
以其 不如
如果 就
假如（反问式）设问
排比语句


话题
故事
举例子
俗语
歇后语
谚语
世事洞明皆学问 人情练达即文章
一张图片 可以切换话题
手机可以切换话题
不要把话给聊死了
今天逛街好累，
今天我跟同事去吃椰子鸡了，
相互之间的话题交互
耐心 宽容心 感恩心

文章
电子文章

技术技能
身体素质
心态
心理素质
性格
全封闭学习工作
想得多做得少

心理学
销售
空想
冥想
闷想

工作计划
人生计划
人生目标
不断学习

rest API、

tail -n 200 cms-service.log

在一个行业里做一件事
有权重的

表设计
落实
网关问题
数量是否稳定下来



"areaCode": "440304001000",
      "currentPage": 1,
      "nodeLevel": 3,
      "pageSize": 10


需要添加（地区等级）nodeLevel参数的接口：

1、回收机列表查询：/boss/site/query-site-info


2、回收机版本升级：/boss/version/query-version-update


3、单台多台升级：/boss/siteAndroidUpdate/querySiteUpgradeLogList


4、故障反馈：/boss/fault/query-fault-detail


5、回收机管理员列表查询：/boss/recyclerManager/query-recyclerManager-info



List<CyclingSiteSwitchingTimeCityDO> collect = data.getList().stream().map(siteSwitchingTimeCityDTO -> {
	CyclingSiteSwitchingTimeCityDO cyclingSiteSwitchingTimeCityDO = new CyclingSiteSwitchingTimeCityDO();
	cyclingSiteSwitchingTimeCityDO.setId(siteSwitchingTimeCityDTO.getId());
	cyclingSiteSwitchingTimeCityDO.setBootTime(siteSwitchingTimeCityDTO.getBootTime());
	cyclingSiteSwitchingTimeCityDO.setAreaCode(siteSwitchingTimeCityDTO.getAreaCode());
	cyclingSiteSwitchingTimeCityDO.setCityName(siteSwitchingTimeCityDTO.getCityName());
	//添加清运时间
	cyclingSiteSwitchingTimeCityDO.setCleanTransportTime(siteSwitchingTimeCityDTO.getCleanTransportTime());
	cyclingSiteSwitchingTimeCityDO.setShutdownTime(siteSwitchingTimeCityDTO.getShutdownTime());
	cyclingSiteSwitchingTimeCityDO.setUpdatedUserName(siteSwitchingTimeCityDTO.getUpdatedUserName());
	cyclingSiteSwitchingTimeCityDO.setCreatedUserName(siteSwitchingTimeCityDTO.getCreatedUserName());
	cyclingSiteSwitchingTimeCityDO.setUpdatedTime(siteSwitchingTimeCityDTO.getUpdatedTime());
	return cyclingSiteSwitchingTimeCityDO;
}).collect(Collectors.toList());


对象序列化的作用




/customer-microservice/user/query-user-packet-record-list-page
/customer-microservice/user/detail/query-by-phone
/customer-microservice/user/query-by-id-for-boss
/customer-microservice/account/withdraw/record/query-user-withdraw-record-list-page\



VirtualBeanRegistrar

1、分布式锁
2、方案
3、数据设计模式
4、程序员不仅仅是代码开发，要是只是代码的开发仅仅做到的是基本功能的实现而已，纯粹的搬砖活
更多是的获取更多的方案策略解决。设计模式的思想运用，业务的严谨熟练，性能的最优化，问题的快速解决。举一反三，
对各个领域 各个技能的了解，熟练。
5、msyql优化
6、底层代码
7、高并发问题
8、各大工具类（单机版，联网版）
9、常问的问题
10、索引库solr lucence。
11、数据库的存储过程
12、jdk8新属性
13、mybatis
14、springboot springcloud
15、分布式事务

初始化：
import org.springframework.beans.factory.InitializingBean;
public class TestInitializingBean implements InitializingBean{
    @Override
    public void afterPropertiesSet() throws Exception {
        System.out.println("ceshi InitializingBean");        
    }
    public void testInit(){
        System.out.println("ceshi init-method");        
    }
}

<bean id="testInitializingBean" class="com.TestInitializingBean" ></bean>

public class Main {
    public static void main(String[] args){
        ApplicationContext context = new FileSystemXmlApplicationContext("/src/main/java/com/beans.xml");
    }
}


产品：
技术：
问题：高并发处理不好导致什么问题，
二、遇到的问题
三、数据库问题
四、springboot问题
五、javabean问题
接口可以多继承 比如BeanDefinition ioc容器
类不可用多继承

系统优化
高并发
数据库优化、

数据库锁：乐观锁 悲观锁 行锁 表锁
redis锁
分布式锁：redis  数据库

/**
 * 获取自身代理
 *
 * @return
 */
private CardInviteBizService getSelfProxy() {
	return (CardInviteBizService) AopContext.currentProxy();
}

适配器：WebMvcConfigurerAdapter

代理(Proxy)是一种设计模式,提供了对目标对象另外的访问方式;即通过代理对象访问目标对象.这样做的好处是:可以在目标对象实现的基础上,增强额外的功能操作,即扩展目标对象的功能.
这里使用到编程中的一个思想:不要随意去修改别人已经写好的代码或者方法,如果需改修改,可以通过代理的方式来扩展该方法



全英文音乐
全英文电影
全英文工作



static{}与{}区别


遇到的问题：没有添加事务 定位问题的困难

http://10.10.10.222:8070/signin#/appid=xhg-boss  
账号：13657034947
密码：113062520

适配器
对接



支付宝的钱转过来

https://www.cnblogs.com/sxdcgaq8080/p/7712874.html


zengqc7问好+!


枚举：

修改
增加的方法


账号：身份证
密码：多个叹号


循环加事务
用controller接收异常，service抛出异常，然后方法头部加上@Transactional(propagation = Propagation.REQUIRED, rollbackFor = { Exception.class })确实是起作用的。


jsr303
自定义校验器
AtomicInteger
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.atomic.AtomicInteger;
mongodb
https://blog.csdn.net/qq_35888875/article/details/78731555


mvn mybatis-generator:generate

public RespObj test(ReqObj request){

}


ConcurrentHashMap例子：

order_mic_service1  ==> Map<String, Integer> addrMap = new ConcurrentHashMap<>();==>全国34个省份名字，编码  ==>  广东省,10004
order_mic_service2  ==> Map<String, Integer> addrMap = new ConcurrentHashMap<>();==>全国34个省份名字，编码  ==>  广东省,10004


java基础 线程 并发 锁  
git 合并
svn 合并
httpservletrequestwrapper


rocketmq
监听：
https://blog.csdn.net/qq_18603599/article/details/81172866

aop
@Pointcut("@annotation(com.kxs.common.annotation.SysLog)")//指向自定义注解路径
可以添加参数
jsr303

13544361981
24655472092
zengqc793510
Zengqc793510!@
139570
353534
z353534


if(实例 instanceof 类){
	类 instants = (类)实例;
}

SpringUtil.getBean("baiduFace");


工厂方法模式：
接口：
public interface FaceInterface { 

String test(){}

}
两个实现类：
@Service
public class BaiduAiFace implements FaceInterface {
String test(){.....}
}

@Service
public class BaiduFace implements FaceInterface {
String test(){.....}
}

工厂类：
public class FaceHelper {

   @Autoware
   private BaiduAiFace baiduAiFace;
   
   @Autoware
   private BaiduFace baiduFace;

    public FaceInterface getFaceHelper(String type) {
        if (StringUtils.isBlank(faceType)) {
            faceType = findFaceType();
        }

        if ("BAIDU".equalsIgnoreCase(faceType)) {
            return (FaceInterface) SpringUtil.getBean("BaiduAiFace");
        }

        if ("BAIDUAI".equalsIgnoreCase(faceType)) {
            return (FaceInterface) SpringUtil.getBean("BaiduFace");
        }

        throw new IllegalArgumentException("不支持的人脸类型");
    }
}


3100000
120000000



造成MySQL全表扫描的原因
全表扫描是数据库搜寻表的每一条记录的过程，直到所有符合给定条件的记录返回为止。通常在数据库中，对无索引的表进行查询一般称为全表扫描；然而有时候我们即便添加了索引，但当我们的SQL语句写的不合理的时候也会造成全表扫描。
以下是经常会造成全表扫描的SQL语句及应对措施： 
1. 使用null做为判断条件 
如：select account from member where nickname = null; 
建议在设计字段时尽量将字段的默认值设为0，改为select account where nickname = 0; 
2. 左模糊查询Like %XXX% 
如：select account from member where nickname like ‘%XXX%’ 或者 select account from member where nickname like ‘%XXX’ 
建议使用select account from member where nickname like ‘XXX%’，如果必须要用到做查询，需要评估对当前表全表扫描造成的后果； 刘加东@酷听说 
3. 使用or做为连接条件 
如：select account from member where id = 1 or id = 2; 
建议使用union all,改为 select account from member where id = 1 union all select account from member where id = 2; 
4. 使用in时(not in) 
如：select account from member where id in (1,2,3) 
如果是连续数据，可以改为select account where id between 1 and 3;当数据较少时也可以参考union用法； 
或者：select account from member where id in (select accountid from department where id = 3 )，可以改为select account from member where id exsits (select accountid from department where id = 3) 
not in 可以对应 not exists; 
5.使用not in时 
如select account where id not in (1,2,3) 
6.使用！=或<>时 
建议使用 <,<=,=,>,>=,between等； 
7.对字段有操作时也会引起权标索引 
如select account where salary * 0.8 = 1000 或者 select account where sustring(nickname,1,3) = ‘zhangxiaolong’; 
8.使用count(*)时 
如select count(*) from member； 
建议使用select count(1) from member; 
9.使用参数做为查询条件时 
如select account from member where nickname = @name 
由于SQL语句在编译执行时并不确定参数，这将无法通过索引进行数据查询，所以尽量避免



















