mybatis与hibernate区别:
mybatis半自动jdbc 灵活的自定义sql


mybatis映射文件 用一个标签<collection

public class Employee {
    private Integer eId;
    private String eName;
    private Integer gender;
    private String email;
    private Department dept;
	//getter setter
}
public class Department {
    private Integer id;
    private String departName;
    private List<Employee> empList;
	//getter setter 
}
<resultMap type="com.hand.mybatis.bean.Department" id="departmentMap">
	<result property="id" column="did"/>
	<result property="departName" column="deptname"/>
	<!--collection定义关联集合类型的属性的封装规则
		ofType:指定集合里面元素的类型  -->
	<collection property="empList" ofType="com.hand.mybatis.bean.Employee">
	 <!-- 定义这个集合元素的封装规则 -->
	  <id column="eid" property="eId"/>
	  <result column="ename" property="eName"/>
	  <result column="email" property="email"/>
	  <result column="gender" property="gender"/>
	</collection>
</resultMap>

mybatis映射文件的继承
<resultMap id="ExtBaseResultMap" type="com.xxx.dao.Tag" extend="com.xxx.dao.mapper.TagMapper.BaseResultMap">
 ...
</resultMap>

not in 与 not exist的区别
如果查询语句使用了not in那么内外表都进行全表扫描，没有用到索引； 
而not extsts 的子查询依然能用到表上的索引。 
所以无论那个表大，用not exists都比not in要快，尽量用not exists就好了
in 与 exist的区别：
in 和 exists的区别: 如果子查询得出的结果集记录较少，主查询中的表较大且又有索引时应该用in, 
反之如果外层的主查询记录较少，子查询中的表大，又有索引时使用exists。
in 是把外表和内表作hash 连接，而exists是对外表作loop循环，每次loop循环再对内表进行查询
不适合建索引的字段：
频繁添加 修改 删除的字段
很多重复的字段 比如性别
a: 肯定在where条经常使用 b: 该字段的内容不是唯一的几个值 c: 字段内容不是频繁变化。

#{} 与 ${}:
相同点：都可以从map中直接取值
不同点：${}取到的值直接拼接到sql语句中，sql语句是直接显示出来的，#{}是以预编译的形式作为一个sql占位符出现，可以防止sql注入
${} 用于列名  表名 还有排序的字段用 原生jdbc不支持占位符的地方

sql优化方案：
存储过程与函数的区别
Nginx与zuul的区别

xml映射文件：
<foreach 标签

MyBatis实现一对多有几种方式,怎么操作的

百度查询：嵌套查询是先查一个表,根据这个表里面结果的外键id,（https://blog.csdn.net/only_musm/article/details/78970465
有联合查询和嵌套查询
（1）联合查询是几个表联合查询,只查询一次,通过在resultMap里面配置collection标签配置一对多的类就可以完成;
（2）嵌套查询是先查一个表,根据这个表里面结果的外键id,去再另外一个表里面查询数据,也是通过配置collection,但另外一个表查询通过select节点配置

<resultMap id="queryForListMap" type="com.sica.domain.User">  
	<id column="id" property="id" jdbcType="VARCHAR"/>  
	<result column="username" property="username" jdbcType="VARCHAR"/>  
	<result column="password" property="password" jdbcType="VARCHAR"/>  
	<collection property="roles" javaType="java.util.List" ofType="com.sica.domain.Role">  
		<id column="r_id" property="id" jdbcType="VARCHAR" />  
		<result column="r_name" property="name" jdbcType="VARCHAR" />  
		<result column="r_jsms" property="jsms" jdbcType="VARCHAR" />  
		<result column="r_bz" property="bz" jdbcType="VARCHAR" />  
		<result column="r_jlzt" property="jlzt" jdbcType="INTEGER" />  
		<result column="r_glbm" property="glbm" jdbcType="VARCHAR" />  
	</collection>  
</resultMap>  
嵌套查询是先查一个表,根据这个表里面
        的结果的外键id,去再另外一个表里面查询数据,也是通过association配置,但另外一个表
        的查询通过select属性配置
		
		
MyBatis的缓存分为一级缓存和二级缓存,https://www.cnblogs.com/zedosu/p/6709943.html
一级缓存放在session里面,默认就有,二级缓存放在它的命名空间里,默认是打开的,
使用二级缓存属性类需要实现Serializable序列化接口(可用来保存对象的状态),可在它的映射文件中配置<cache/>

mybaits的二级缓存是mapper范围级别，除了在SqlMapConfig.xml设置二级缓存的总开关，还要在具体的mapper.xml中开启二级缓存。
在核心配置文件SqlMapConfig.xml中加入
<settingname='cacheEnabled'value='true'/>
<!-- 全局配置参数，需要时再设置 -->
    <settings>
       <!-- 开启二级缓存 默认值为true -->
		<settingname='cacheEnabled'value='true'/>
    </settings>

二级缓存是mapper级别的缓存，多个SqlSession去操作同一个Mapper的sql语句，多个SqlSession去操作数据库得到数据会存在二级缓存区域，
多个SqlSession可以共用二级缓存，二级缓存是跨SqlSession的。二级缓存是多个SqlSession共享的，其作用域是mapper的同一个namespace，
不同的sqlSession两次执行相同namespace下的sql语句且向sql中传递参数也相同即最终执行相同的sql语句，
第一次执行完毕会将数据库中查询的数据写到缓存（内存），
第二次会从缓存中获取数据将不再从数据库查询，从而提高查询效率。
Mybatis默认没有开启二级缓存需要在setting全局参数中配置开启二级缓存。

mybatis刷新缓存（就是清空缓存）：
在mapper的同一个namespace中，如果有其它insert、update、delete操作数据后需要刷新缓存，如果不执行刷新缓存会出现脏读。
设置statement配置中的flushCache='true' 属性，默认情况下为true即刷新缓存，如果改成false则不会刷新。使用缓存时如果手动修改数据库表中的查询数据会出现脏读。
如下：
<insertid='insertUser' parameterType='cn.itcast.mybatis.po.User' flushCache='true'>
springboot开启mybatis二级缓存

二级缓存原理：
二级缓存是mapper级别的。Mybatis默认是没有开启二级缓存。
第一次调用mapper下的SQL去查询用户信息。查询到的信息会存到该mapper对应的二级缓存区域内。
第二次调用相同namespace下的mapper映射文件中相同的SQL去查询用户信息。会去对应的二级缓存内取结果。
如果调用相同namespace下的mapper映射文件中的增删改SQL，并执行了commit操作。此时会清空该namespace下的二级缓存。


linux安装rocketmq
https://blog.csdn.net/wangmx1993328/article/details/81536168
https://blog.csdn.net/zzzgd_666/article/details/81481584
https://blog.csdn.net/wangmx1993328/article/details/81536168
https://blog.csdn.net/qq_18603599/article/details/81172866

nohup sh bin/mqnamesrv &
nohup sh bin/mqbroker -n localhost:9876 autoCreateTopicEnable=true


<dependency>            
<groupId>org.apache.rocketmq</groupId>           
<artifactId>rocketmq-client</artifactId>            
<version>4.2.0</version>       
</dependency>

java对象为什么要序列化对象：
因为要将对象序列化为流的形式进行网络传输。（二进制序列的形式在网络上传送）
对象的序列化就是为了数据传输，在你的代码的里是对象格式，而在传输的时候不可能还保持这对象的样子。
当两个进程在进行远程通信时，彼此可以发送各种类型的数据。无论是何种类型的数据，都会以二进制序列的形式在网络上传送。
发送方需要把这个Java对象转换为字节序列，才能在网络上传送；接收方则需要把字节序列再恢复为Java对象。

发送方：User  ====（序列化）====>>字节序列====（反序列）=====>> 接收方：User
