mysql的最优化方案
阶段：一、表设计阶段 https://www.cnblogs.com/zhangwuji/p/8110916.html（表结构优化）
               避免空值 默认值的设置
			   类型选择（字符varchar长度设置 数字表示中文） 
			   大类型的限制使用 
			   多字段的大表尽量拆分成主表和从表
			   三范式的遵循：1、每一列属性都是不可再分的属性值，确保每一列的原子性（所有关系型数据库系统都满足第一范式数据库表中的字段都是单一属性的，不可再分）
							 2、每一行的数据只能与其中一列相关，即一行数据只做一件事（数据库表中的每个实例或行必须可以被惟一地区分）
							 3、数据不能存在传递关系，即每个属性都跟主键有直接关系而不是间接关系
			   
      二、表使用中
	    联表查询的时候关联字段要创建索引 
		优化查询语句 sql语句尽量的简捷 尽量命中索引
        尽量单表查询 避免join （如果join也要添加索引）		
	  三、表数据量大的时候 
	  1、读写分离  
	  2、大表拆分 
	  3、分库分表
一、mysql 函数/存储过程/视图/触发器/表/外键
表设计的原则：
表：表与表之间的关系，一对一 一对多 多对多（需要中间表）
1.表及字段的命名规则
（1）.可读性原则：使用大小写来格式化的库对象名字以获得良好的可读性。例如：使用custAddress而不是custaddress来提高可读性。
（2）.表意性原则：对象的名字应该能够描述它所表示的对象。例如：对于表，表的名称应该能够体现表中存储的数据内容；对于存储过程，存储过程应该能够体现存储过程的功能。
（3）.长名原则：尽可能少使用或者不使用缩写，适用于数据库（DATABASE）名之外的任一对象。
2.数据库字段类型选择原则
	列的数据类型一方面影响数据存储空间的开销，另一方面也会影响数据查询性能。当一个列可以选择多种数据类型时，应该优先考虑数字类型，其次是日期或者二进制类型，
最后是字符类型。对于相同级别的数据类型，应该优先选择占用空间小的数据类型。

	以上选择原则主要是从下面两个方面考虑。
	（1）在对数据进行比较（查询条件、JOIN条件、排序）操作时：同样的数据，字符处理往往比数字处理慢。
	（2）在数据库中，数据处理以页为单位，列的长度越小，利于性能提升。

3.char与varChar如何选择
	1.如果列中要存储的数据长度差不多是一致的，则应该考虑用char；否则应该考虑用varChar。
	2.如果列中的最大数据长度小于50byte，则一般也考虑用char（如果这个列很少用，则基于节省空间和减少I/O的考虑，还是可以选择用varChar）。
	3.一般不宜定义大于50byte的char类型列。
4.decimal与float如何选择
	1.decimal用于存储精确数据，而float只能用于存储非精确数据。故精确数据只能选择用decimal类型。
	2.由于float的存储空间开销一般比decimal小（精确到7位小数只需要4个字节，而精确到15位小数只需要8字节）故非精确数据优先选择float类型。
5.避免使用外键约束（物理外键，逻辑外键）
	1.降低数据导入的效率。
	2.增加维护成本。
	3.虽然不建议使用外键约束，但是相关联的列上一定要建立索引。

6.避免使用触发器
	1.降低数据导入的效率。
	2.可能会出现意想不到的数据异常。
	3.使业务逻辑变得复杂。
7.避免使用存储空间开销大的数据类型，比如text blog


存储过程与函数的区别：
1）一般来说，存储过程实现的功能要复杂一点，而函数的实现的功能针对性比较强。存储过程，功能强大，可以执行包括修改表等一系列数据库操作；
2）对于存储过程来说可以返回参数，如记录集，而函数只能返回值或者表对象。
函数只能返回一个变量；而存储过程可以返回多个。存储过程的参数可以有IN,OUT,INOUT三种类型，而函数只能有IN类~~存储过程声明时不需要返回类型，
而函数声明时需要描述返回类型，且函数体中必须包含一个有效的RETURN语句。
3）存储过程，可以使用非确定函数，不允许在用户定义函数主体中内置非确定函数。
4）存储过程一般是作为一个独立的部分来执行（ EXECUTE 语句执行），而函数可以作为查询语句的一个部分来调用（SELECT调用），
由于函数可以返回一个表对象，因此它可以在查询语句中位于FROM关键字的后面。 SQL语句中不可用存储过程，而可以使用函数。

视图是数据库中由真实的数据表通过查询语句定义而成的一种虚拟表，视图本身不存储数据只是存储查询数据的定义
（视图是虚拟的表，与包含数据的表不一样，视图只包含使用时动态检索数据的查询）
（1）. 比如你程序发送查询语句给数据库服务器的时候，用视图传输的语句字节数更少
（2）. 程序上的代码写的更少了，更容易读懂视图查询所需要的字段，不必考虑多表查询的细节
（3）. 多表更新字段或减少冗余时，你不必修改程序，只需要更新视图即可
安全：使用视图的用户只能访问他们被允许查询的结果集，对表的权限管理并不能限制到某个行某个列，但是通过视图就可以简单的实现。

触发器：

二、mysql 索引：
数据库管理系统中一个排序的数据结构，以协助快速查询、更新数据库表中数据。索引的实现通常使用B树及其变种B+树。（工作机制）
mysql的复制原理以及流程：
主服务器 binlog线程（binlog）  io线程（replay log）  relay线程（执行线程）
1. 主：binlog线程——记录下所有改变了数据库数据的语句，放进master上的binlog中；
2. 从：io线程——在使用start slave 之后，负责从master上拉取 binlog 内容，放进 自己的relay log中；
3. 从：sql执行线程——执行relay log中的语句；

三、mysql 存储引擎

四、mysql 锁机制 https://www.cnblogs.com/leedaily/p/8378779.html
MySQL的表级锁有两种模式：表共享读锁（Table Read Lock）和表独占写锁（Table Write Lock）。
对MyISAM表的读操作，不会阻塞其他用户对同一表的读请求，但会阻塞对同一表的写请求；
对 MyISAM表的写操作，则会阻塞其他用户对同一表的读和写操作；
MyISAM表的读操作与写操作之间，以及写操作之间是串行的！
如何加表锁：
MyISAM在执行查询语句（SELECT）前，会自动给涉及的所有表加读锁，在执行更新操作 （UPDATE、DELETE、INSERT等）前，会自动给涉及的表加写锁，
这个过程并不需要用户干预

InnoDB与MyISAM的最大不同有两点：一是支持事务（TRANSACTION）；二是采用了行级锁。
1.InnoDB支持事物，而MyISAM不支持事物
2.InnoDB支持行级锁，而MyISAM支持表级锁
3.InnoDB支持MVCC, 而MyISAM不支持
4.InnoDB支持外键，而MyISAM不支持
5.InnoDB不支持全文索引，而MyISAM支持。
6.InnoDB不能通过直接拷贝表文件的方法拷贝表到另外一台机器， myisam 支持
7.InnoDB表支持多种行格式， myisam 不支持
8.InnoDB是索引组织表， myisam 是堆表


不可重复读：A事务在执行过程中，B事务对数据进行了修改或删除，导致A两次读取的数据不一致；
重点在于update和delete（锁行即可解决），
幻读：A事务在执行过程中，B事务新增了符合A事务要查询的数据，导致A两次读取的数据不一致；
重点在于insert（需要锁表解决）。

使用到行锁的情况：
只有通过索引条件检索数据，InnoDB才使用行级锁，否则，InnoDB将使用表锁！ 
在不通过索引条件查询的时候，InnoDB确实使用的是表锁，而不是行锁。

MyISAM表的读和写是串行的，但这是就总体而言的。在一定条件下，MyISAM表也支持查询和插入操作的并发进行。 
MyISAM存储引擎有一个系统变量concurrent_insert，专门用以控制其并发插入的行为，其值分别可以为0、1或2。
当concurrent_insert设置为0时，不允许并发插入。
当concurrent_insert设置为1时，如果MyISAM表中没有空洞（即表的中间没有被删除的行），MyISAM允许在一个进程读表的同时，另一个进程从表尾插入记录。这也是MySQL的默认设置。
当concurrent_insert设置为2时，无论MyISAM表中有没有空洞，都允许在表尾并发插入记录。

******五、sql语句

横表 纵表的转换
一张表的自关联
select *
from
t_cycling_db_area a1,
t_cycling_db_area a2
where
a1.id = a2.parent_id
and a2.area_code = #{areaCode}


带@的sql语句
update t_cycling_bu_ad m,(select * 
						  from  ( select @x := @x+1 xx,a.* 
						          from t_cycling_bu_ad a ,(select @x :=0) b 
                                  where a.channel_type='wecha_xcx' 
								        and a.column_type='banner-c-centre' 
								        and a.status=1 order by a.sort) temp
						) as t 
set m.sort=t.xx 
where m.id=t.id
其中(select @x :=0) b  是初始化的值。

SELECT id,@id := @id +2 iid
FROM t_user_account a,(SELECT @id :=0) b

UPDATE t_user_account aa,(
SELECT id,@id := @id +2 iid
FROM t_user_account a,(SELECT @id :=0) b ) bb
SET aa.user_id=bb.iid
WHERE aa.id=bb.id


mysql存储引擎：

MySQL中一条SQL语句的执行过程：
（前提）客户端连接（tcp）连接mysql服务器，服务器验证并且分配资源
1、客户端发送sql语句 mysql服务器验证权限，
2、查看 查询缓存池，现在缓存中查看该sql是否完全匹配，如果匹配就返回结果。
3、分析器（语法）  预处理器（表，列的存在） 优化器（sql语句的优化，选择索引） 执行器（同步放在查询缓存里）

缓存到查询缓存受到几个参数的影响 
1.query_cache_type 是否打开查询缓存,默认为OFF  
2.query_cache_size:查询缓存使用的总内存空间,默认值为1M   
3.query_cache_limit 对于大于该值的结果集不会被缓存，默认值1M，在8.0版本后该参数被移除了）
（如果该SQL执行过程中超过了慢查询阀值，该SQL会被记录到慢查询日志中）

一句sql语句执行顺序：
	1. FROM阶段
	on(以某个连接条件) 	
	(以某种连接类型) join (右表) 
	2. WHERE阶段
	3. GROUP BY阶段
	4. HAVING阶段
	5. SELECT阶段
	union 
	6. ORDER BY阶段
	7. LIMIT阶段

1、drop,delete与truncate的区别
truncate直接把数据全部删除，且不可恢复


https://blog.csdn.net/qq_18603599/article/details/81172866

部署的规模：
并发量：（几万？）
最大连接：
访问量：
活跃量：
项目的情况：

开发的部署项目工作：
1、内置tomcat的优化 比如连接池  连接数 特殊的端口
2、@feign @Hysteria  （针对全局 单个策略）
A == > B 错误率 连接池满了
zuul getewag     
请求分发

灰度发布
表分区
分表分库（策略）

验证机制 补偿机制






