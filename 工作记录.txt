人生偶尔臭美一下 也是可以的

性格：急躁 暴躁 脾气大 胆怯 质疑 
心理素质的加强
感恩的心
宽容心


不忘初心 方得始终 始终易得 初心难守


 
请教的问题：
 rocketMQ 
 CAT
 自定义注解
 mqtt
 

项目：自己的

目标:

Mq延迟

同步延迟

人工智能



QPs 3000 100
https://blog.csdn.net/czbing308722240/article/details/52350219/



@Override
@Transactional(rollbackFor = Exception.class)
@Topic(value = "${xhg.mq.recycling.topic.prefix}door-recycling-use-coupon")
public void receiveUseCouponMessage(UseCouponReqDTO reqDTO) {
CouponUserEntity couponUserParam = null;
CouponUseRecordEntity useRecord = null;
	//判断卡券是否已使用(幂等判断)
CouponUserEntity entity = couponUserDao.queryById(reqDTO.getUserCouponId());
if(entity != null){
	//卡券存在
	if(CouponStatusEnum.COUPON_STATUS_NO_USED.getKey().equals(entity.getCouponStatus())){
		//卡券未被使用
		couponUserParam = new CouponUserEntity();
		couponUserParam.setId(reqDTO.getUserCouponId());
		couponUserParam.setCouponStatus(CouponStatusEnum.COUPON_STATUS_YES_USED.getKey());
		//更改用户卡券状态为已使用
		couponUserDao.update(couponUserParam);
		//插入卡券使用数据
		useRecord = new CouponUseRecordEntity();
		useRecord.setOrderNo(reqDTO.getOrderNo());
		useRecord.setUserCouponId(reqDTO.getUserCouponId());
		useRecord.setOrderAmountBefore(reqDTO.getOrderAmount());
		useRecord.setOrderAmountAfter(reqDTO.getOrderAmount().add(entity.getAmount()));
		useRecord.setAmount(entity.getAmount());
		useRecord.setUseTime(new Date());
		useRecord.setOrderType(reqDTO.getOrderType());
		couponUseRecordDao.insert(useRecord);
		// 发送mq
		UserTradeReqDTO userTradeReqDTO = new UserTradeReqDTO();
		userTradeReqDTO.setAmount(useRecord.getAmount());
		userTradeReqDTO.setOrderNo(useRecord.getOrderNo());
		userTradeReqDTO.setUserId(reqDTO.getUserId());
		userTradeReqDTO.setTradeType(TRADE_TYPE);
		userTradeReqDTO.setBizSource(BIZ_SOURCE);
		customerProducer.sendUserIncomeTradeMessage(userTradeReqDTO);
	}
}
}



redis缓存
nexus私服
maven
linux
rocketMQ服务器
euroke服务器
nginx服务器
mysql服务器
solr服务器
mysql数据导入
svn服务器
git服务器
idea集成工具



@Override
public PagerResult<QueryCardInviteeRespDTO> queryCardInvitee(QueryCardInviteeReqDTO data) {
	// 查询活动基本信息
	Activity activity = activityService.queryByActivityCode(ActivityCodeConstant.INVITE_CARD_ACTIVITY_V202);

	PagerResult<InviteInvitee> pagerResult = inviteInviteeService.findPage(data, activity);
	List<QueryCardInviteeRespDTO> queryCardInviteeRespDTOList = new ArrayList<QueryCardInviteeRespDTO>();

	if(pagerResult.getList().size() > 0){
		List<UserListRspDTO> userListRspDTOList = inviteBizService.queryUserPhoneList(pagerResult.getList());
		Map<Integer, String> userIdPhone = userListRspDTOList.stream().collect(Collectors.toMap(UserListRspDTO::getUserId, UserListRspDTO::getPhone,(k1,k2)->k1));
		pagerResult.getList().forEach(inviteInvitee -> {
			QueryCardInviteeRespDTO queryCardInviteeRespDTO = new QueryCardInviteeRespDTO();
			queryCardInviteeRespDTO.setFirstDelivery(inviteInvitee.getFirstDelivery());
			queryCardInviteeRespDTO.setPhone(DesensitizationUtils.mobileEncrypt(userIdPhone.get(inviteInvitee.getInviteeUserId())));
			queryCardInviteeRespDTO.setRegistrationTime(DateUtils.formatDate(inviteInvitee.getRegistrationTime(), DateUtils.DATE_PATTERN));
			queryCardInviteeRespDTOList.add(queryCardInviteeRespDTO);
		});
	}
	return pagerResult.toTPagerResult(queryCardInviteeRespDTOList);
}


子接口（父类）继承父接口，可以重写它的方法，可以重构方法。

接口：ApplicationContextAware
InitializingBean
BeanDefinitionRegistry
BeanDefinition
ConcurrentHashMap


clazz.getMethods()和clazz.getDeclaredMethods()的区别
@Import
 {
            
        }
		
		 static {
        
    }
	
	http://svn.xhg.com:8010/xhg-product/%E5%8E%9F%E5%9E%8B%E5%9B%BE/xhg-customer/

	
static{}(静态代码块)与{}(非静态代码块)的异同点


相同点：都是在JVM加载类时且在构造方法执行之前执行，在类中都可以定义多个，

　　　　一般在代码块中对一些static变量进行赋值。

不同点：静态代码块在非静态代码块之前执行(静态代码块—>非静态代码块—>构造方法)。

　　　　静态代码块只在第一次new执行一次，之后不再执行，而非静态代码块在每new

　　　　一次就执行一次。非静态代码块可在普通方法中定义(不过作用不大)；而静态代码块不行。

什么是jvm
子父类的构造方法的调用顺序:先调用父类的构造器方法，再调用本身的。


重载构造方法是可以的。
但是重写则不可以，因为被重写的前提是被继承，
而构造方法根本就不能被继承，所以谈不上被重写。
不继承构造方法，只能调用


堆栈方法区：https://blog.csdn.net/anjoyandroid/article/details/78609971
首地址
hashcode 
equals  ==
GC
Java hashCode() 和 equals()的若干问题解答
== : 它的作用是判断两个对象的地址是不是相等。即，判断两个对象是不试同一个对象。

equals() : 它的作用也是判断两个对象是否相等。但它一般有两种使用情况(前面第1部分已详细介绍过)：
		 情况1，类没有覆盖equals()方法。则通过equals()比较该类的两个对象时，等价于通过“==”比较这两个对象。
		 情况2，类覆盖了equals()方法。一般，我们都覆盖equals()方法来两个对象的内容相等；若它们的内容相等，则返回true(即，认为这两个对象相等)
		 
	 
对象地址 存储地址 首地址  内存地址
final修饰的类不可以被继承
final修饰的方法不可被重写。但是可以重载。
final修饰的变量的值不可以变，
final修饰的引用变量不可以重新new，但是引用变量的内部值可以改变（比如说User user = new User("张三",18) user不可以再new，但是里面的名字 年龄可以修改）对象引用指向刚创建的那个User对象。


set<Object> set = new HashSet<>();
先用hashcode判断，再用equals判断

对象重写了这两个方法，那么判断两个对象的内容即可。不需要判断对象的存储地址了。



1、java中的栈（stack）和堆（heap）是java在内存（ram）中存放数据的地方

2、堆区

 存储的全部是对象，每个对象都包含一个与之对应的class的信息。（class的目的是得到操作指令）；

 jvm只有一个heap区，被所有线程共享，不存放基本类型和对象引用，只存放对象本身。

 堆的优劣势：堆的优势是可以动态的分配内存大小，生存期也不必事先告诉编译器，java的垃圾收集器会自动收取这些不在使用的数　　　　　　　　　　　　　　　

　　　　　　　　据，但缺点是，由于要在运行时动态分配内存，存取速度慢。

3、栈区

 每一个线程包含一个stack区，只保存基本数据类型的对象和自定义对象的引用（不是对象），对象都存放在共享heap中；

 每个栈中的数据（基本数据类型和对象引用）都是私有的，其他栈不能访问；

 栈分为3部分：基本类型变量区、执行环境上下文、操作指令区（存放操作指令）

　　栈的优势劣势：存取速度比堆要快，仅次于直接位于CPU的寄存器，但必须确定的是存在stack中的数据大小与生存期必须是确定　　　　　　　　　　

　　　　　　　　　　的，缺乏灵活性。单个stack的数据可以共享。

  stack：是一个先进后出的数据结构，通常保存方法中的参数，局部变量。

　　　　　　在java中，所有基本类型和引用类型都在stack中储存，栈中数据的生存空间一般在当前scopes内

4、方法区

 1、又叫静态区，跟堆一样，被所有的线程共享。方法区包含所有的class和static变量；

 2、方法区中包含的都是在程序中永远的唯一的元素

5、在JAVA中，有六个不同的地方可以存储数据：
　　1. 寄存器（register）。这是最快的存储区，因为它位于不同于其他存储区的地方——处理器内部。但是寄存器的数量极其有限，所　　　　

	以寄存器由编译器根据需求进行分配。你不能直接控制，也不能在程序中感觉到寄存器存在的任何迹象。


　　2. 堆栈（stack）。位于通用RAM中，但通过它的“堆栈指针”可以从处理器哪里获得支持。堆栈指针若向下移动，则分配新的内存；　　　　

　　　　若向上移动，则释放那些 内存。这是一种快速有效的分配存储方法，仅次于寄存器。创建程序时候，JAVA编译器必须知道存储　　　　

　　　　在堆栈内所有数据的确切大小和生命周期，因为它必须生成 相应的代码，以便上下移动堆栈指针。这一约束限制了程序的灵活　　　　　　

　　　　性，所以虽然某些JAVA数据存储在堆栈中——特别是对象引用，但是JAVA对象不存储其 中。 


　　3. 堆（heap）。一种通用性的内存池（也存在于RAM中），用于存放所以的JAVA对象。堆不同于堆栈的好处是：编译器不需要知　　　　

　　　　道要从堆里分配多少存储区 域，也不必知道存储的数据在堆里存活多长时间。因此，在堆里分配存储有很大的灵活性。当你需要　　　　

　　　　创建一个对象的时候，只需要new写一行简单的代码，当执行 这行代码时，会自动在堆里进行存储分配。当然，为这种灵活性必　　　　

　　　　须要付出相应的代码。用堆进行存储分配比用堆栈进行存储存储需要更多的时间。 


　　4. 静态存储（static storage）。这里的“静态”是指“在固定的位置”。静态存储里存放程序运行时一直存在的数据。你可用关键字　　　　

　　　　　static来标识一个对象的特定元素是静态的，但JAVA对象本身从来不会存放在静态存储空间里。 


　　5. 常量存储（constant storage）。常量值通常直接存放在程序代码内部，这样做是安全的，因为它们永远不会被改变。有时，在　　　　

　　　　嵌入式系统中，常量本身会和其他部分分割离开，所以在这种情况下，可以选择将其放在ROM中 


　　6. 非RAM存储。如果数据完全存活于程序之外，那么它可以不受程序的任何控制，在程序没有运行时也可以存在。 
　　　就速度来说，有如下关系： 
　　　寄存器 < 堆栈 < 堆 < 其他 

	运行类过程：方法区找到方法--堆中实例化对象--调用栈（指向堆中实例）
	
linux命令：

 清空 /etc/test.txt 文档内容：
 cat /dev/null > /etc/test.txt
 netstat -tunlp|grep 8777  查看端口是否被占用
 free 查询内存
 查找文件命令集合：
 find / -name cms-service.log 从/开始查找cms-service.log文件
 
 后端：
nohup java -jar  -Xms200m -Xmx200m -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/data/logs/xhg-alliance-service/ -Dspring.config.location=/etc/xhg/xhg-alliance-service/application.properties xhg-alliance-microservice-1.0.3.jar 2>../logs/xhg-alliance-service/allianceserviceerr.out  1>../logs/xhg-alliance-service/allianceservicestd.out  &

boss端
nohup java -jar -Xms200m -Xmx200m -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/data/logs/boss/ -Dspring.config.location=/etc/xhg/xhg-boss/application.properties  /data/psrecycle/xhg-boss-1.5.2.jar 2>/data/logs/boss/bosserr.out 1>/data/logs/boss/bossstd.out &

前端：
python -m SimpleHTTPServer 9080

清空test.txt文件
cat /dev/null > /etc/test.txt




nohup java -jar -Xms200m -Xmx200m -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/data/logs/xhg-cms-service/ -Dspring.config.location=/etc/xhg/xhg-cms-service/application.properties /data/psrecycle/xhg-cms-service-1.1.0.2.jar 2>/data/logs/xhg-cms-service/cmsserviceerr.out 1>/data/logs/xhg-cms-service/cmsservicestd.out &




nohup java -jar -Xms200m -Xmx200m -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/data/logs/boss/ -Dspring.config.location=/etc/xhg/xhg-boss/application.properties  /data/psrecycle/xhg-boss-1.5.2.jar 2>/data/logs/boss/bosserr.out 1>/data/logs/boss/bossstd.out &


tail -f -n 200 cmsservicestd.out


产品在线工具：
https://www.processon.com/diagrams

60 * 30 = 1800

20*8 




mybatis自动化工具生成命令：
mybatis-generator:generate

环境问题：
版本的兼容问题

git:
git remote add pb git://github.com/paulboone/ticgit.git

拦截器 过滤器 监听器
https://blog.csdn.net/java_collect/article/details/80873686

redis缓存对象的方式
https://www.cnblogs.com/moxiaotao/p/9933319.html


redis也可以缓存对象以及List集合：
@ApiOperation(value = "缓存测试")
@GetMapping("/getValueFromRedis")
public String getValueFromRedis() {
	Object object = redisUtil.get("lili");
	if(object instanceof TestUser) {
		TestUser testUser = (TestUser) redisUtil.get("lili");
		System.out.println("name:" + testUser.getName());
	}
	if(object instanceof List) {
		List testUser = (List) redisUtil.get("lili");
		System.out.println("name:"+testUser.size());
	}
	return "aaaa";
}

今日工作总结
1、工作内容及结果
（做了什么？取得什么样的结果？）
2、存在的问题、解决办法及体会
3、需公司其他部门协助或上级支持决策的事项
（解决在工作完成过程中出现的问题需要其他部门或上级给予支持帮助，这个问题我的解决方案是怎么样的？由上级反馈是否可行。）


工作日报：所有员工第二个工作日前将当天工作日志提交与部门经理及系统管理员，未提交者每次将罚款20元，每周超过3次（大于3次），
罚款100元。（注：日报与考勤采取不定式公示制度，公布后不做任何修改）。


覆盖老资源

需求：用户角色权限模块

加密接口
https://blog.csdn.net/qq_33409823/article/details/89205226

mvn clean package -Pbeta -Dmaven.test.skip=true
ssh root@220.231.216.160
Ectrip@testapp2018


pos通 要做的接口
二维码获取接口
3 567


git clone http://gitlab.jingqu.cn/product/ectrip-pay-sdk.git -b dev-lakala

在这个路径下
/home/q/www/instance_small.ectrip.com/webapps/ROOT/WEB-INF/classes
保留这个三个文件
-rw-r--r-- 1 tomcat tomcat  355 Aug 29 09:26 config.properties
-rw-r--r-- 1 tomcat tomcat  272 Aug 29 09:25 jdbc.properties
-rw-r--r-- 1 tomcat tomcat  986 Aug 29 09:25 logback.xml

小程序服务器参数
ssh root@220.231.216.160
Ectrip@testapp2018
测试后台目录
项目根目录：/home/q/www/instance_small.ectrip.com/webapps/ROOT
项目配置文件目录：/home/q/www/instance_small.ectrip.com/webapps/ROOT/WEB-INF/classes
/home/q/tomcat/bin/stop_tomcat.sh /home/q/www/instance_small.ectrip.com/
/home/q/tomcat/bin/start_tomcat.sh /home/q/www/instance_small.ectrip.com/



整个聚合文件都clean install -Dmaven.test.skip=true 打包出war文件

视频 音乐 小说 dfj ml  



https://blog.csdn.net/qq_39172525/article/details/78543246


顺丰科技


二维码生成
https://gw.open.icbc.com.cn/api/qrcode/V2/generate

二维码查询
https://gw.open.icbc.com.cn/api/qrcode/V2/query

二维码支付
https://gw.open.icbc.com.cn/api/qrcode/V2/pay


QrcodeGenerateRequestV2.QrcodeGenerateRequestV2Biz bizContent = new QrcodeGenerateRequestV2.QrcodeGenerateRequestV2Biz();

springboot注解的线程池配置：https://blog.csdn.net/whiteGu/article/details/84994098
springboot使用线程池ThreadPoolTaskExecutor的设置
多个概念：
springboot多线程执行定时任务


线程有返回值
线程之间的通信：
springboot的jvm调优
springboot的线程池设置
java调用.bat批文件处理



    












 
 

 




