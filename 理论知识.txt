java基础
一、jvm
jvm的定义。
https://blog.csdn.net/anjoyandroid/article/details/78609971
1.方法区（Method Area）
     存放了要加载的类的信息（如类名、类中的字段和方法、修饰符等）、静态变量、构造函数、final定义的常量等信息。方法区是全局共享的，在一定条件下也会被GC。当方法区超过它允许的大小时，就会抛出OutOfMemory：PermGen Space异常。
在Hotspot虚拟机中，这块区域对应持久代（Permanent Generation），一般来说，方法区上执行GC的情况很少，因此方法区被称为持久代的原因之一，但这并不代表方法区上完全没有GC，其上的GC主要针对常量池的回收和已加载类的卸载。在方法区上进行GC，条件相当苛刻而且困难。
运行时常量池（Runtime Constant Pool） 是方法区的一部分，用于存储编译器生成的常量和引用。一般来说，常量的分配在编译时就能确定，但也不全是，也可以存储在运行时期产生的常量。比如String类的intern（）方法，作用是String类维护了一个常量池，如果调用的字符”hello”已经在常量池中，则直接返回常量池中的地址，否则新建一个常量加入池中，并返回地址。

2.堆区（Heap）
堆区是GC最频繁的，也是理解GC机制最重要的区域。堆区由所有线程共享，在虚拟机启动时创建。堆区主要用于存放对象实例及数组，所有new出来的对象都存储在该区域。

3.虚拟机栈
4.本地方法栈
5.程序计数器

二、jvm的调优
  配置上的调优
1、tomcat上的配置文件的设置
2、gc的调优
吞吐量：是指在不考虑垃圾收集器引起的停顿时间或内存消耗的前提下，垃圾收集器能支撑应用达到的最高性能指标。 
延迟：（垃圾器收集引起的停顿时间）
       其度量标准是缩短由于垃圾器收集引起的停顿时间或者完全消除因垃圾收集所引起的停顿，避免应用运行时发生抖动。 
内存占用：垃圾收集器流畅运行所需要的内存数量。 

总之在这三个属性中，其中一个任何一个属性性能的提高，几乎都是以另外一个或者两个属性性能的损失作代价，不可兼得，
具体某一个属性或者两个属性的性能对应用来说比较重要，要基于应用的业务需求来确定。


  代码层的调优（精打细磨 精耕细作，减少代码体积：便于维护 易读简短 提高代码的重复使用率；提高代码的运行效率）
1、有些方法、类用final来修饰
2、局部变量
3、代码的重复使用（String Stringbuffer）
4、关闭流
5、某些计算能省就省下来，虽然看起来微不足道，但是多了也是对jvm的性能的一个考验。list.size();
6、尽量采用懒加载的策略，即在需要的时候才创建
7、谨慎用异常
8、不要在循环中使用try…catch…，应该把其放在最外层
9、如果能估计到待添加的内容长度，为底层以数组方式实现的集合、工具类指定初始长度
10、当复制大量数据时，使用System.arraycopy命令
11、乘法和除法使用移位操作
12、循环内不要不断创建对象引用或者死循环的出现
16、尽量在合适的场合使用单例
17、尽量避免随意使用静态变量
20、使用同步代码块替代同步方法
22、不要创建一些不使用的对象，不要导入一些不使用的类
25、使用带缓冲的输入输出流进行IO操作
27、不要让public方法中有太多的形参（太多的参数可以封装成一个对象）
28、sql语句的调优
https://blog.csdn.net/qq_15766297/article/details/70503222

 架构的调优
 
 什么情况下触发full gc
 System.gc()
 老年代代空间不足
 永久代代空间不足

二、GC的原理：https://www.cnblogs.com/meitian/p/4570621.html


三、线程，进程，锁 同步锁synchronize
死锁：https://blog.csdn.net/m0_38126177/article/details/78587845
产生死锁可能性的最根本原因是：线程在获得一个锁L1的情况下再去申请另外一个锁L2，也就是锁L1想要包含了锁L2，也就是说在获得了锁L1，并且没有释放锁L1的情况下，又去申请获得锁L2，这个是产生死锁的最根本原因。
另一个原因是默认的锁申请操作是阻塞的。
如果我们能够避免在对象的同步方法中调用其它对象的同步方法，那么就可以避免死锁产生的可能性

**乐观锁，悲观锁：
悲观锁与乐观锁是两种常见的资源并发锁设计思路，也是并发编程中一个非常基础的概念。本文将对这两种常见的锁机制在数据库数据上的实现进行比较系统的介绍。

悲观锁（Pessimistic Lock）
悲观锁的特点是先获取锁，再进行业务操作，即“悲观”的认为获取锁是非常有可能失败的，因此要先确保获取锁成功再进行业务操作。通常所说的“一锁二查三更新”即指的是使用悲观锁。通常来讲在数据库上的悲观锁需要数据库本身提供支持，即通过常用的select … for update操作来实现悲观锁。当数据库执行select for update时会获取被select中的数据行的行锁，因此其他线程并发执行的select for update如果试图选中同一行则会发生排斥（需要等待行锁被释放），因此达到锁的效果。select for update获取的行锁会在当前事务结束时自动释放，因此必须在事务中使用。

这里需要注意的一点是不同的数据库对select for update的实现和支持都是有所区别的，例如oracle支持select for update no wait，表示如果拿不到锁立刻报错，而不是等待，mysql就没有no wait这个选项。另外mysql还有个问题是select for update语句执行中所有扫描过的行都会被锁上，这一点很容易造成问题。因此如果在mysql中用悲观锁务必要确定走了索引，而不是全表扫描。

乐观锁（Optimistic Lock）
乐观锁的特点先进行业务操作，不到万不得已不去拿锁。即“乐观”的认为拿锁多半是会成功的，因此在进行完业务操作需要实际更新数据的最后一步再去拿一下锁就好。

乐观锁在数据库上的实现完全是逻辑的，不需要数据库提供特殊的支持。一般的做法是在需要锁的数据上增加一个版本号，或者时间戳，然后按照如下方式实现：

复制代码
1. SELECT data AS old_data, version AS old_version FROM user;
2. 根据获取的数据进行业务操作，得到new_data和new_version（old_version+1）
3. UPDATE user SET data = new_data, version = old_version+1 WHERE version = old_version
if (updated row > 0) {
    // 乐观锁获取成功，操作完成
} else {
    // 乐观锁获取失败，回滚并重试
}
复制代码
乐观锁是否在事务中其实都是无所谓的，其底层机制是这样：在数据库内部update同一行的时候是不允许并发的，即数据库每次执行一条update语句时会获取被update行的写锁，直到这一行被成功更新后才释放。因此在业务操作进行前获取需要锁的数据的当前版本号，然后实际更新数据时再次对比版本号确认与之前获取的相同，并更新版本号，即可确认这之间没有发生并发的修改。如果更新失败即可认为老版本的数据已经被并发修改掉而不存在了，此时认为获取锁失败，需要回滚整个业务操作并可根据需要重试整个过程。

总结
乐观锁在不发生取锁失败的情况下开销比悲观锁小，但是一旦发生失败回滚开销则比较大，因此适合用在取锁失败概率比较小的场景，可以提升系统并发性能

乐观锁还适用于一些比较特殊的场景，例如在业务操作过程中无法和数据库保持连接等悲观锁无法适用的地方

线程和进程的区别：
进程和线程的区别？什么时候用进程？什么时候用线程？
答：首先得知道什么是进程什么是线程？

我的理解是进程是指在系统中正在运行的一个应用程序；程序一旦运行就是进程，或者更专业化来说：进程是指程序执行时的一个实例。

线程是进程的一个实体。线程是进程中执行运算的最小单位
1、单个进程中执行中每个任务就是一个线程。线程是进程中执行运算的最小单位。
2、一个线程只能属于一个进程，但是一个进程可以拥有多个线程。多线程处理就是允许一个进程中在同一时刻执行多个任务。
3、线程是一种轻量级的进程，与进程相比，线程给操作系统带来侧创建、维护、和管理的负担要轻，意味着线程的代价或开销比较小。

进程——资源分配的最小单位，线程——程序执行的最小单位。


线程进程的区别体现在几个方面：

第一：因为进程拥有独立的堆栈空间和数据段，所以每当启动一个新的进程必须分配给它独立的地址空间，建立众多的数据表来维护它的代码段、堆栈段和数据段 而线程不一样，线程拥有独立的堆栈空间，但是共享数据段，它们彼此之间使用相同的地址空间，共享大部分数据，比进程更节俭，开销比较小，切换速度也比进程快，效率高，但是正由于进程之间独立的特点，使得进程安全性比较高，也因为进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。一个线程死掉就等于整个进程死掉。

3.属于同一个进程的所有线程共享该进程的所有资源

4.线程又称为轻量级进程，进程有进程控制块，线程有线程控制块；

5.线程必定也只能属于一个进程，而进程可以拥有多个线程而且至少拥有一个线程；


四、java IO 减少跟数据库的交互：批量插入（例子：投递订单，黑名单，营销短信，回收订单） 对象序列化
对象序列化，就是将java对象转化成字节流方便读取，以及网络上的传输。


五、数据结构之map：
   https://www.cnblogs.com/heyonggang/p/9112731.html，
   https://www.cnblogs.com/acm-bingzi/p/javaMap.html
   
  HashMap、Hashtable、ConcurrentHashMap  LinkedHashMap、TreeMap
  linkedMap在于存储数据你想保持进入的顺序与被取出的顺序一致的话
  LinkedHashMap:
　　LinkedHashMap保存了记录的插入顺序，在用Iterator遍历LinkedHashMap时，先得到的记录肯定是先插入的。也可以在构造时带参数，按照应用次数排序。
　　在遍历的时候会比HashMap慢，不过有种情况例外：当HashMap容量很大，实际数据较少时，遍历起来可能会比LinkedHashMap慢。因为LinkedHashMap的遍历速度只和实际数据有关，和容量无关，而HashMap的遍历速度和他的容量有关。
  TreeMap:
　　TreeMap实现SortMap接口，能够把它保存的记录根据键排序。
　　默认是按键值的升序排序，也可以指定排序的比较器，当用Iterator 遍历TreeMap时，得到的记录是排过序的。

  数据结构之list：
  

六、设计模式，开发原则，开发思想理论。
七、高并发以及问题解决
八、高内聚低耦合
九、多线程、mq 、
十、遇到的问题，怎么解决。（高并发，静态变量的问题，sql优化，分库分表，数据量超大的问题）  
十一、代理模式
十二、instanceof的使用
十三、字符串的比较大小
十四、日期的比较大小：先格式化，在比较字符串
十五、日期的使用
十六、synchronized volatile lock的区别
十七、代码规范，代码的易读性理解，易于维护，升级，可伸缩，灵活性，性能最优，代码体积小






数据库
一、四种设计模式，表与表之间的关系：
表与表之间的关系：一对多，多对多，一对一，关联表
1.主扩展模式：

　　一般应用于提取不同类型的对象的共同特征。比如学校当中，对于上课而言分为
老师和学生，但对于食堂大妈或者门卫大爷而言，就看你是不是校内人员。这是一种包含
关系。即校内人员包括 学生、老师、其他工作人员。如果做一个签到系统，就设定校内
人员为user表，老师、学生之类的单独成表，但是都维护同样的userid同时作为二者的主

键。使之称为1对1的关系。这种模式就是主扩展模式。

　　扩展表的主键既是扩展表的主键也是主表的外键

 

2.主从模式
　　主从模式的应用场景最多。是典型的一对多的关系。比如贴吧的实现，整个
吧就是一个主表。而贴吧有许多的从表就是不同楼主发的帖子，而每个帖子有用很多从表
那就是每个楼所对应的信息。

 

3.名值关系
　　主要处理系统设计阶段还不能完全确定的属性的对象。这些对象的属性在系统运
行时会有很大的变更，或者是多个对象之间的属性存在很大的差异。
　　比如说一个学生的表，记录了一些学生必须有的属性：年龄身高体重姓名什么的。但是突然有
一天有一个人穿越了，他就需要一个剑术值的数据。通常需要额外两个表来存储这种不确定是否
会用会有的属性。

 

　　首先需要一个属性模版表，就是不管这个属性属于谁，属于何物，何时，
我只是证明有这么一条额外属性而存在。那么上述的例子当中，属性模板表当中就
需要添加一条属性：（属性代码一般给属性分类用）

　　ID 1 属性代码 1001 属性名称 剑术值

　　但是具体剑术值是多少，这个表不去讨论。存储数据的表称为额外属性表，这个
表存储的字段分别标识
　　1.这条数据属于哪个人、物（角色id）
　　2.这条数据是什么属性 （属性模板ID）
　　3.属性的具体值是多少	（data)
4.多对多关系
      多对多模式，也是比较常见的一种数据库设计模式，它所描述的两个对象不分主次、地位对等、互为一对多的关系。对于A表来说，一条记录对应着B表的多条记录，反过来对于B表来说，一条记录也对应着A表的多条记录，这种情况就是“多对多模式”。
这个主要可以细分成两种情况。取决于关联表有没有业务需求。

二、索引，视图，存储过程，触发器，函数，事件的基本定义以及其意义：
三、sql性能优化：
四、分库分表
五、读写分离：https://www.jianshu.com/p/4f87cd813b94?utm_source=oschina-app
六、大表拆分
七、数据库存储引擎:
myisam（默认的）不支持事务，非事务安全型的，只有表锁 不考虑并发 不支持外键，支持(FULLTEXT类型的)全文索引
innodb 支持事务，外键，行锁 表锁 不支持全文索引 、
MyISAM和InnoDB两者的应用场景：
1) MyISAM管理非事务表。它提供高速存储和检索，以及全文搜索能力。如果应用中需要执行大量的SELECT查询，那么MyISAM是更好的选择。
2) InnoDB用于事务处理应用程序，具有众多特性，包括ACID事务支持。如果应用中需要执行大量的INSERT或UPDATE操作，则应该使用InnoDB，这样可以提高多用户并发操作的性能。

但是实际场景中，针对具体问题需要具体分析，一般而言可以遵循以下几个问题：
-  数据库是否有外键？ 
-  是否需要事务支持？ 
-  是否需要全文索引？ 
-  数据库经常使用什么样的查询模式？在写多读少的应用中还是Innodb插入性能更稳定，在并发情况下也能基本，如果是对读取速度要求比较快的应用还是选MyISAM。 
-  数据库的数据有多大？ 大尺寸倾向于innodb，因为事务日志，故障恢复。

八、数据库事务：原子 一致 隔离 持久 https://www.cnblogs.com/deliver/p/5730616.html 隔离级别：包括Read Uncommitted、Read Committed、Repeatable Read、Serializable，见这篇。mysql 一般默认Repeatable Read。
脏读（dirty read）：A事务读取B事务尚未提交的更改数据，并在这个数据基础上操作。如果B事务回滚，那么A事务读到的数据根本不是合法的，称为脏读。在oracle中，由于有version控制，不会出现脏读。
不可重复读（unrepeatable read）：A事务读取了B事务已经提交的更改（或删除）数据。比如A事务第一次读取数据，然后B事务更改该数据并提交，A事务再次读取数据，两次读取的数据不一样。
幻读（phantom read）：A事务读取了B事务已经提交的新增数据。注意和不可重复读的区别，这里是新增，不可重复读是更改（或删除）。这两种情况对策是不一样的，对于不可重复读，只需要采取行级锁防止该记录数据被更改或删除，
然而对于幻读必须加表级锁，防止在这个表中新增一条数据。

九、数据库类型，表与表之间的关系。
十、主从数据同步。
十一、（锁机制）悲观锁，乐观锁：
悲观锁：指定的主键、索引，行锁，没有指定就是表锁
乐观锁：

十二、数据量特别大的情况下 是否用join（数据库数据量大 join 先查出主表 再查关联表）
 select * from t1,t2 where t1.object_id=t2.object_id;
代码层面的优化，服务器的优化，表设计，查询语句优化 缓存 索引  分库分表 大表拆分 读写分离

十三、横表变纵表sql：
十四、数据迁移sql
十五、事先预估数据量 数据量大、访问频繁（或者两者都有），根据这些情况设计表。 

https://www.jianshu.com/p/3dbdd12a7ed7 
https://blog.csdn.net/qq_39940205/article/details/80536666
•分区
•就是把一张表的数据分成N个区块，在逻辑上看最终只是一张表，但底层是由N个物理区块组成的
•分表
•就是把一张表按一定的规则分解成N个具有独立存储空间的实体表。系统读写时需要根据定义好的规则得到对应的字表明，然后操作它。
•分库
一旦分表，一个库中的表会越来越多

代码层：sql语句的优化，缓存的利用，数据库层：分库分表分区读写分离，数据归档 数据库服务层：集群（负载均衡）
十六、分布式事务，https://infoq.cn/article/solution-of-distributed-system-transaction-consistency、
十七、分布式锁：
十八、mysql的几种链接查询，批量操作。
oracle mysql postgresql sql-server




缓存
key规范的统一
消息队列
消息重复消费问题
RocketMQ是一款分布式、队列模型的消息中间件，是由阿里巴巴团队设计的，具有以下特点：
1、亿级消息堆积能力，消息堆积后，写入低延迟。
2、支持重试机制
3、支持持久化机制
4、支持Topic与Queue两种模式
5、能够保证严格的消息顺序、事务消息
6、强调集群无单点，可扩展
7、丰富的消息拉取模式
8、历经多次天猫双十一海量消息考验
9、RocketMQ是纯java编写，基于通信框架Netty。
10、支持上万个队列


问题
statics的问题
运行时报错，
redis的key规范导致的问题
版本的兼容，方法的修改。
事务的添加





//两个线程的线程池
ExecutorService executor= Executors.newFixedThreadPool(2);
//小红买酒任务，这里的future2代表的是小红未来发生的操作，返回小红买东西这个操作的结果
CompletableFuture<String> future2 = CompletableFuture.supplyAsync(()-> {
   System.out.println("爸：小红你去买瓶酒！");
   try {
	   System.out.println("小红出去买酒了，女孩子跑的比较慢，估计5s后才会回来...");
	   Thread.sleep(5000);
	   return "我买回来了！";
   } catch (InterruptedException e) {
	   System.err.println("小红路上遭遇了不测");
	   return "来世再见！";
   }
},executor);

//小明买烟任务，这里的future1代表的是小明未来买东西会发生的事，返回值是小明买东西的结果

CompletableFuture<String> future1 = CompletableFuture.supplyAsync(()->{
   System.out.println("爸：小明你去买包烟！");
   try {
	   System.out.println("小明出去买烟了，可能要3s后回来...");
	   Thread.sleep(3000);
	   return "我买回来了!";
   } catch (InterruptedException e) {
	   System.out.println("小明路上遭遇了不测！");
	   return "这是我托人带来的口信，我已经不在了。";
   }
},executor);

//获取小红买酒结果，从小红的操作中获取结果，把结果打印
future2.thenAccept((e)->{System.out.println("小红说："+e);});
//获取小明买烟的结果
future1.thenAccept((e)->{System.out.println("小明说："+e);});

System.out.println("爸：loading......");
System.out.println("爸:我觉得无聊甚至去了趟厕所。");
System.out.println("爸：loading......");

	   
	   
1.查看日志常用命令
tail:  
   -n  是显示行号；相当于nl命令；例子如下：
		tail -100f test.log      实时监控100行日志
		tail  -n  10  test.log   查询日志尾部最后10行的日志;

		tail -n +10 test.log    查询10行之后的所有日志;

head:  

	跟tail是相反的，tail是看后多少行日志；例子如下：

		head -n 10  test.log   查询日志文件中的头10行日志;

		head -n -10  test.log   查询日志文件除了最后10行的其他所有日志;
cat： 
      tac是倒序查看，是cat单词反写；例子如下：
      cat -n test.log |grep "debug"   查询关键字的日志
    可以使用 >xxx.txt 将其保存到文件中,到时可以拉下这个文件分析
       如：cat -n test.log |grep "debug"  >debug.txt
     cat -n test.log |grep "debug" |more     这样就分页打印了,通过点击空格键翻页
根据日期时间的范围查找日志


sed -n '/2019-01-11 16:16:32.542/,/2019-01-11 16:17:32.953'  cms-service.log

grep  -w   "xxxx" yyyyy.log -2 --color  -n  > /tmp/tmp.log
-w 全匹配
-2 关键字上下2行
--color 关键字着色
-n 输出行号
less /tmp/tmp.log
grep  -w   "xxxx" yyyyy.log -2 --color  -n  | less
1+2=


grep '1e3d2d1d2001a80b8d00' boss.log -A 20 --color

grep '1e3d3ffbc401a80b8d00' cms-service.log -A 20 --color

less cms-service.log -A 20 |grep 'debug' 

less cms-service.log |grep '1e732170740004204600' -A 200 --color

cat -n catalina.out |grep '053574ccc432403c9762ac1372a7c7'

改名字
mv a.txt  b.txt或者mv -v b.txt  a.txt
将文件移到指定目录下（相当于剪切）
mv -v a.txt  dir2/
改名并且移到
mv -v a.txt  b.txt  dir2/
如果b.txt存在是否覆盖
mv -vi a.txt  b.txt
如果b.txt存在 强制覆盖
mv -vf a.txt  b.txt

cp复制命令
复制
cp 1.txt 1.txt.backup
全部复制
cp *.txt test

scp基于ssh登录 复制文件
scp /home/space/music/1.mp3 root@www.cumt.edu.cn:/home/root/others/music/001.mp3 

sz命令是利用ZModem协议来从Linux服务器传送文件到本地，一次可以传送一个或多个文件。
rz命令是从本地上传文件到Linux服务器。
tar
unzip 
zip 
rm -rf
In -s
这是linux中一个非常重要命令，请大家一定要熟悉。它的功能是为某一个文件在另外一个位置建立一个同不的链接，这个命令最常用的参数是-s,
具体用法是：ln -s 源文件 目标文件。
当 我们需要在不同的目录，用到相同的文件时，我们不需要在每一个需要的目录下都放一个必须相同的文件，我们只要在某个固定的目录，放上该文件，然后在其它的 目录下用ln命令链接（link）它就可以，不必重复的占用磁盘空间。例如：ln -s /bin/less /usr/local/bin/less
-s 是代号（symbolic）的意思。
这 里有两点要注意：第一，ln命令会保持每一处链接文件的同步性，也就是说，不论你改动了哪一处，其它的文件都会发生相同的变化；第二，ln的链接又软链接 和硬链接两种，软链接就是ln -s ** **,它只会在你选定的位置上生成一个文件的镜像，不会占用磁盘空间，硬链接ln ** **,没有参数-s, 它会在你选定的位置上生成一个和源文件大小相同的文件，无论是软链接还是硬链接，文件都保持同步变化。

stat cms-service.log

在终端输入：
chmod o w xxx.xxx
　　表示给其他人授予写xxx.xxx这个文件的权限
chmod go-rw xxx.xxx
　　表示删除xxx.xxx中组群和其他人的读和写的权限
　　其中：
u 代表所有者（user）
g 代表所有者所在的组群（group）
o 代表其他人，但不是u和g （other）
a 代表全部的人，也就是包括u，g和o
r 表示文件可以被读（read）
w 表示文件可以被写（write）
x 表示文件可以被执行（如果它是程序的话）
　　其中：rwx也可以用数字来代替
r ------------4
w -----------2
x ------------1
- ------------0
　　行动：

表示添加权限
- 表示删除权限
= 表示使之成为唯一的权限
当大家都明白了上面的东西之后，那么我们常见的以下的一些权限就很容易都明白了：

-rw------- (600) 只有所有者才有读和写的权限
-rw-r--r-- (644) 只有所有者才有读和写的权限，组群和其他人只有读的权限
-rwx------ (700) 只有所有者才有读，写，执行的权限
-rwxr-xr-x (755) 只有所有者才有读，写，执行的权限，组群和其他人只有读和执行的权限
-rwx--x--x (711) 只有所有者才有读，写，执行的权限，组群和其他人只有执行的权限
-rw-rw-rw- (666) 每个人都有读写的权限
-rwxrwxrwx (777) 每个人都有读写和执行的权限
例子：https://www.cnblogs.com/yjd_hycf_space/p/7730690.html
文件的权限 - 使用 "+" 设置权限，使用 "-" 用于取消 
ls -lh 显示权限 
ls /tmp | pr -T5 -W$COLUMNS 将终端划分成5栏显示 
chmod ugo+rwx directory1 设置目录的所有人(u)、群组(g)以及其他人(o)以读（r ）、写(w)和执行(x)的权限 
chmod go-rwx directory1 删除群组(g)与其他人(o)对目录的读写执行权限 
chown user1 file1 改变一个文件的所有人属性 
chown -R user1 directory1 改变一个目录的所有人属性并同时改变改目录下所有文件的属性 
chgrp group1 file1 改变文件的群组 
chown user1:group1 file1 改变一个文件的所有人和群组属性 
find / -perm -u+s 罗列一个系统中所有使用了SUID控制的文件 
chmod u+s /bin/file1 设置一个二进制文件的 SUID 位 - 运行该文件的用户也被赋予和所有者同样的权限 
chmod u-s /bin/file1 禁用一个二进制文件的 SUID位 
chmod g+s /home/public 设置一个目录的SGID 位 - 类似SUID ，不过这是针对目录的 
chmod g-s /home/public 禁用一个目录的 SGID 位 
chmod o+t /home/public 设置一个文件的 STIKY 位 - 只允许合法所有人删除文件 
chmod o-t /home/public 禁用一个目录的 STIKY 位 

文件的特殊属性 - 使用 "+" 设置权限，使用 "-" 用于取消 
chattr +a file1 只允许以追加方式读写文件 
chattr +c file1 允许这个文件能被内核自动压缩/解压 
chattr +d file1 在进行文件系统备份时，dump程序将忽略这个文件 
chattr +i file1 设置成不可变的文件，不能被删除、修改、重命名或者链接 
chattr +s file1 允许一个文件被安全地删除 
chattr +S file1 一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘 
chattr +u file1 若文件被删除，系统会允许你在以后恢复这个被删除的文件 
lsattr 显示特殊的属性 

打包和压缩文件 
bunzip2 file1.bz2 解压一个叫做 'file1.bz2'的文件 
bzip2 file1 压缩一个叫做 'file1' 的文件 
gunzip file1.gz 解压一个叫做 'file1.gz'的文件 
gzip file1 压缩一个叫做 'file1'的文件 
gzip -9 file1 最大程度压缩 
rar a file1.rar test_file 创建一个叫做 'file1.rar' 的包 
rar a file1.rar file1 file2 dir1 同时压缩 'file1', 'file2' 以及目录 'dir1' 
rar x file1.rar 解压rar包 
unrar x file1.rar 解压rar包 
tar -cvf archive.tar file1 创建一个非压缩的 tarball 
tar -cvf archive.tar file1 file2 dir1 创建一个包含了 'file1', 'file2' 以及 'dir1'的档案文件 
tar -tf archive.tar 显示一个包中的内容 
tar -xvf archive.tar 释放一个包 
tar -xvf archive.tar -C /tmp 将压缩包释放到 /tmp目录下 
tar -cvfj archive.tar.bz2 dir1 创建一个bzip2格式的压缩包 
tar -jxvf archive.tar.bz2 解压一个bzip2格式的压缩包 
tar -cvfz archive.tar.gz dir1 创建一个gzip格式的压缩包 
tar -zxvf archive.tar.gz 解压一个gzip格式的压缩包 
zip file1.zip file1 创建一个zip格式的压缩包 
zip -r file1.zip file1 file2 dir1 将几个文件和目录同时压缩成一个zip格式的压缩包 
unzip file1.zip 解压一个zip格式压缩包 

useradd 
groupadd
touch -t 0712250000 file1 修改一个文件或目录的时间戳 - (YYMMDDhhmm)

网络通信 socket编程 NIO

前后端
跨域处理
前后端分离：swagger文档化
json格式化
对象序列化
xml格式化
对接第三方接口

框架
mybatis
hibernate
springcloud
springboot
springmvc
aop
ioc
过滤器 拦截器
spring事务处理
spring定时任务 多线程
**spring 单例多例 https://www.cnblogs.com/goody9807/p/7472139.html  高并发以及问题解决 活动项目一起看
springmvc执行流程 dispatchservlet




As:


用户表(user01 user02 user03 user04)：id name age adress
回收机表(machine)：id user_id machine_code


需求：需要获取一个分页列表：
id machine_code userName adress


阐述客观事实
我的问题
我的需求
我对你的要求


英语 电影 励志歌曲 励志视频 励志音乐 励志文章

吃喝玩乐
演唱会
临时演员
明星演员
关系
情感
故事 时事 真事 假事 半真半假
数学，加法 减法 乘法 除法
语文
物理 
化学


23种模式：
为了使程序的扩展性好，易于维护和升级
单列模式，对频繁用到的类和有些比较大型的类，减少系统开销
降低了系统内存的使用频率，减轻GC压力


减少内存消化，
减少系统开销，
代码的重复利用 提高开发效率 提高程序运行效率
降低依赖，降低耦合 扩展性好，易于维护和升级，易读，
高内聚低耦合，减少依赖，维护不牵涉太多东西
代理服务有利于系统的安全性

安全性
易读，简短
已维护 升级 修改 扩展性
低耗，对系统开销低，减少内存的消耗
程序运行高效，
开发的高效,灵活编码，可插拔
代码直接高内聚低耦合，
延迟加载有助于提升性能

我们引入了接口的适配器模式，借助于一个抽象类，
该抽象类实现了该接口，但是它的方法体都是可以，实现了所有的方法，
而我们不和原始的接口打交道，只和该抽象类取得联系，
所以我们写一个类，继承该抽象类，重写我们需要的方法就行

享元模式：
JVM为了提高性能和减少内存开销，在实例化字符串常量的时候进行了一些优化
为字符串开辟一个字符串常量池，类似于缓存区
创建字符串常量时，首先坚持字符串常量池是否存在该字符串
存在该字符串，返回引用实例，不存在，实例化该字符串并放入池中
实现的基础
实现该优化的基础是因为字符串是不可变的，可以不用担心数据冲突进行共享
运行时实例创建的全局字符串常量池中有一个表,总是为池中每个唯一的字符串对象维护一个引用,这就意味着它们一直引用着字符串常量池中的对象，所以，在常量池中的这些字符串不会被垃圾收集器回收

String用new String() 
创建的字符串不是常量，不能在编译期就确定，
所以new String() 创建的字符串不放入常量池中，它们有自己的地址空间。 
String str = new String("abc");
String str1 ="abc";

利用AOP可以对业务逻辑的各个部分(也就是主业务和公共的非主业务）进行隔离，
从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率
















